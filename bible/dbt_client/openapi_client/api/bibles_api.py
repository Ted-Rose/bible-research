# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BiblesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v4_bible_all(self, v, **kwargs):  # noqa: E501
        """Returns Bibles based on filter criteria  # noqa: E501

        The base bible route returning by default bibles and filesets that your key has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_all(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param Iso language_code: The iso code to filter results by. This will return results only in the language specified. For a complete list see the `iso` field in the `/languages` route
        :param SetTypeCode media: Will filter bibles based upon the media type of their filesets
        :param SetTypeCode media_exclude: Will exclude bibles based upon the media type of their filesets
        :param Id country: The iso code to filter results by. This will return results only in the language specified. For a complete list see the `iso` field in the `/country` route
        :param bool audio_timing: This will return results only which have audio timing information available for that bible. The timing information is stored in table bible_file_timestamps.
        :param int page: The current page of the results
        :param int limit: The number of search results to return
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V4BibleAll
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_all_with_http_info(v, **kwargs)  # noqa: E501

    def v4_bible_all_with_http_info(self, v, **kwargs):  # noqa: E501
        """Returns Bibles based on filter criteria  # noqa: E501

        The base bible route returning by default bibles and filesets that your key has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_all_with_http_info(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param Iso language_code: The iso code to filter results by. This will return results only in the language specified. For a complete list see the `iso` field in the `/languages` route
        :param SetTypeCode media: Will filter bibles based upon the media type of their filesets
        :param SetTypeCode media_exclude: Will exclude bibles based upon the media type of their filesets
        :param Id country: The iso code to filter results by. This will return results only in the language specified. For a complete list see the `iso` field in the `/country` route
        :param bool audio_timing: This will return results only which have audio timing information available for that bible. The timing information is stored in table bible_file_timestamps.
        :param int page: The current page of the results
        :param int limit: The number of search results to return
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V4BibleAll, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v',
            'language_code',
            'media',
            'media_exclude',
            'country',
            'audio_timing',
            'page',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'media' in local_var_params and local_var_params['media'] is not None:  # noqa: E501
            query_params.append(('media', local_var_params['media']))  # noqa: E501
        if 'media_exclude' in local_var_params and local_var_params['media_exclude'] is not None:  # noqa: E501
            query_params.append(('media_exclude', local_var_params['media_exclude']))  # noqa: E501
        if 'country' in local_var_params and local_var_params['country'] is not None:  # noqa: E501
            query_params.append(('country', local_var_params['country']))  # noqa: E501
        if 'audio_timing' in local_var_params and local_var_params['audio_timing'] is not None:  # noqa: E501
            query_params.append(('audio_timing', local_var_params['audio_timing']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V4BibleAll',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_books(self, id, v, **kwargs):  # noqa: E501
        """Book information for a Bible  # noqa: E501

        Returns a list of translated book names and general information for the given Bible. The actual list of books may vary from fileset to fileset. For example, a King James Fileset may contain deuterocanonical books that are missing from one of it's sibling filesets nested within the bible parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_books(id, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id id: (required)
        :param int v: The Version Number (required)
        :param Id book_id: The book id. For a complete list see the `book_id` field in the `/bibles/books` route.
        :param bool verify_content: Filter all the books that have content
        :param bool verse_count: Retrieve how many verses the chapters of the books have
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V4BibleBooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_books_with_http_info(id, v, **kwargs)  # noqa: E501

    def v4_bible_books_with_http_info(self, id, v, **kwargs):  # noqa: E501
        """Book information for a Bible  # noqa: E501

        Returns a list of translated book names and general information for the given Bible. The actual list of books may vary from fileset to fileset. For example, a King James Fileset may contain deuterocanonical books that are missing from one of it's sibling filesets nested within the bible parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_books_with_http_info(id, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id id: (required)
        :param int v: The Version Number (required)
        :param Id book_id: The book id. For a complete list see the `book_id` field in the `/bibles/books` route.
        :param bool verify_content: Filter all the books that have content
        :param bool verse_count: Retrieve how many verses the chapters of the books have
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V4BibleBooks, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'v',
            'book_id',
            'verify_content',
            'verse_count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_books" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v4_bible_books`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_books`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'book_id' in local_var_params and local_var_params['book_id'] is not None:  # noqa: E501
            query_params.append(('book_id', local_var_params['book_id']))  # noqa: E501
        if 'verify_content' in local_var_params and local_var_params['verify_content'] is not None:  # noqa: E501
            query_params.append(('verify_content', local_var_params['verify_content']))  # noqa: E501
        if 'verse_count' in local_var_params and local_var_params['verse_count'] is not None:  # noqa: E501
            query_params.append(('verse_count', local_var_params['verse_count']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/{id}/book', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V4BibleBooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_by_id_search(self, version, v, **kwargs):  # noqa: E501
        """Returns metadata for all bibles meeting the given version in it's Bible ID  # noqa: E501

        metadata for all bibles meeting the version in it's Bible ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_by_id_search(version, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id version: (required)
        :param int v: The Version Number (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_by_id_search_with_http_info(version, v, **kwargs)  # noqa: E501

    def v4_bible_by_id_search_with_http_info(self, version, v, **kwargs):  # noqa: E501
        """Returns metadata for all bibles meeting the given version in it's Bible ID  # noqa: E501

        metadata for all bibles meeting the version in it's Bible ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_by_id_search_with_http_info(version, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id version: (required)
        :param int v: The Version Number (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'version',
            'v'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_by_id_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `v4_bible_by_id_search`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_by_id_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version' in local_var_params and local_var_params['version'] is not None:  # noqa: E501
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_copyright(self, bible_id, v, **kwargs):  # noqa: E501
        """Bible Copyright information  # noqa: E501

        All bible fileset's copyright information and organizational connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_copyright(bible_id, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id bible_id: The Bible ID to retrieve the copyright information for (required)
        :param int v: The Version Number (required)
        :param Iso iso: The iso code to filter organization translations by. For a complete list see the `iso` field in the `/languages` route.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[V4BibleFilesetsCopyright]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_copyright_with_http_info(bible_id, v, **kwargs)  # noqa: E501

    def v4_bible_copyright_with_http_info(self, bible_id, v, **kwargs):  # noqa: E501
        """Bible Copyright information  # noqa: E501

        All bible fileset's copyright information and organizational connections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_copyright_with_http_info(bible_id, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id bible_id: The Bible ID to retrieve the copyright information for (required)
        :param int v: The Version Number (required)
        :param Iso iso: The iso code to filter organization translations by. For a complete list see the `iso` field in the `/languages` route.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[V4BibleFilesetsCopyright], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bible_id',
            'v',
            'iso'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_copyright" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bible_id' is set
        if self.api_client.client_side_validation and ('bible_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bible_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bible_id` when calling `v4_bible_copyright`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_copyright`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bible_id' in local_var_params:
            path_params['bible_id'] = local_var_params['bible_id']  # noqa: E501

        query_params = []
        if 'iso' in local_var_params and local_var_params['iso'] is not None:  # noqa: E501
            query_params.append(('iso', local_var_params['iso']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/{bible_id}/copyright', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V4BibleFilesetsCopyright]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_defaults(self, v, **kwargs):  # noqa: E501
        """Default Bible for a language  # noqa: E501

        Returns default Bible for a language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_defaults(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param str language_code: The language code to filter results by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V4BiblesDefaults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_defaults_with_http_info(v, **kwargs)  # noqa: E501

    def v4_bible_defaults_with_http_info(self, v, **kwargs):  # noqa: E501
        """Default Bible for a language  # noqa: E501

        Returns default Bible for a language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_defaults_with_http_info(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param str language_code: The language code to filter results by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V4BiblesDefaults, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v',
            'language_code'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_defaults" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_defaults`")  # noqa: E501

        if self.api_client.client_side_validation and ('language_code' in local_var_params and  # noqa: E501
                                                        len(local_var_params['language_code']) > 6):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `language_code` when calling `v4_bible_defaults`, length must be less than or equal to `6`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/defaults/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V4BiblesDefaults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_filesets_show_chapter(self, fileset_id, book, chapter, v, **kwargs):  # noqa: E501
        """Returns content for a single fileset, book and chapter  # noqa: E501

        For a given fileset, book and chapter, return content (text, audio or video)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_filesets_show_chapter(fileset_id, book, chapter, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id fileset_id: The fileset ID (required)
        :param Id book: Will filter the results by the given book. For a complete list see the `book_id` field in the `/bibles/books` route. (required)
        :param ChapterStart chapter: Will filter the results by the given chapter (required)
        :param int v: The Version Number (required)
        :param VerseStart verse_start: Will filter the results by the given starting verse
        :param VerseEnd verse_end: Will filter the results by the given ending verse
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_filesets_show_chapter_with_http_info(fileset_id, book, chapter, v, **kwargs)  # noqa: E501

    def v4_bible_filesets_show_chapter_with_http_info(self, fileset_id, book, chapter, v, **kwargs):  # noqa: E501
        """Returns content for a single fileset, book and chapter  # noqa: E501

        For a given fileset, book and chapter, return content (text, audio or video)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_filesets_show_chapter_with_http_info(fileset_id, book, chapter, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id fileset_id: The fileset ID (required)
        :param Id book: Will filter the results by the given book. For a complete list see the `book_id` field in the `/bibles/books` route. (required)
        :param ChapterStart chapter: Will filter the results by the given chapter (required)
        :param int v: The Version Number (required)
        :param VerseStart verse_start: Will filter the results by the given starting verse
        :param VerseEnd verse_end: Will filter the results by the given ending verse
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'fileset_id',
            'book',
            'chapter',
            'v',
            'verse_start',
            'verse_end'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_filesets_show_chapter" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'fileset_id' is set
        if self.api_client.client_side_validation and ('fileset_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['fileset_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `fileset_id` when calling `v4_bible_filesets_show_chapter`")  # noqa: E501
        # verify the required parameter 'book' is set
        if self.api_client.client_side_validation and ('book' not in local_var_params or  # noqa: E501
                                                        local_var_params['book'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `book` when calling `v4_bible_filesets_show_chapter`")  # noqa: E501
        # verify the required parameter 'chapter' is set
        if self.api_client.client_side_validation and ('chapter' not in local_var_params or  # noqa: E501
                                                        local_var_params['chapter'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `chapter` when calling `v4_bible_filesets_show_chapter`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_filesets_show_chapter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fileset_id' in local_var_params:
            path_params['fileset_id'] = local_var_params['fileset_id']  # noqa: E501
        if 'book' in local_var_params:
            path_params['book'] = local_var_params['book']  # noqa: E501
        if 'chapter' in local_var_params:
            path_params['chapter'] = local_var_params['chapter']  # noqa: E501

        query_params = []
        if 'verse_start' in local_var_params and local_var_params['verse_start'] is not None:  # noqa: E501
            query_params.append(('verse_start', local_var_params['verse_start']))  # noqa: E501
        if 'verse_end' in local_var_params and local_var_params['verse_end'] is not None:  # noqa: E501
            query_params.append(('verse_end', local_var_params['verse_end']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/filesets/{fileset_id}/{book}/{chapter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_filesets_types(self, v, **kwargs):  # noqa: E501
        """Available fileset types  # noqa: E501

        A list of all the file types that exist within the filesets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_filesets_types(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_filesets_types_with_http_info(v, **kwargs)  # noqa: E501

    def v4_bible_filesets_types_with_http_info(self, v, **kwargs):  # noqa: E501
        """Available fileset types  # noqa: E501

        A list of all the file types that exist within the filesets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_filesets_types_with_http_info(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_filesets_types" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_filesets_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/filesets/media/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_one(self, id, v, **kwargs):  # noqa: E501
        """Returns detailed metadata for a single Bible  # noqa: E501

        Detailed information for a single Bible  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_one(id, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id id: (required)
        :param int v: The Version Number (required)
        :param  UNKNOWN_PARAMETER_NAME:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_one_with_http_info(id, v, **kwargs)  # noqa: E501

    def v4_bible_one_with_http_info(self, id, v, **kwargs):  # noqa: E501
        """Returns detailed metadata for a single Bible  # noqa: E501

        Detailed information for a single Bible  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_one_with_http_info(id, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id id: (required)
        :param int v: The Version Number (required)
        :param  UNKNOWN_PARAMETER_NAME:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'v',
            'UNKNOWN_PARAMETER_NAME'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v4_bible_one`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'UNKNOWN_PARAMETER_NAME' in local_var_params and local_var_params['UNKNOWN_PARAMETER_NAME'] is not None:  # noqa: E501
            query_params.append(('include_font', local_var_params['UNKNOWN_PARAMETER_NAME']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_bible_search(self, search_text, v, **kwargs):  # noqa: E501
        """Returns metadata for all bibles meeting the search_text in it's name  # noqa: E501

        metadata for all bibles meeting the search_text in it's name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_search(search_text, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id search_text: (required)
        :param int v: The Version Number (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_bible_search_with_http_info(search_text, v, **kwargs)  # noqa: E501

    def v4_bible_search_with_http_info(self, search_text, v, **kwargs):  # noqa: E501
        """Returns metadata for all bibles meeting the search_text in it's name  # noqa: E501

        metadata for all bibles meeting the search_text in it's name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_bible_search_with_http_info(search_text, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id search_text: (required)
        :param int v: The Version Number (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'search_text',
            'v'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_bible_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'search_text' is set
        if self.api_client.client_side_validation and ('search_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['search_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `search_text` when calling `v4_bible_search`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_bible_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search_text' in local_var_params:
            path_params['search_text'] = local_var_params['search_text']  # noqa: E501

        query_params = []
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/bibles/search/{search_text}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_download(self, fileset_id, book_id, chapter, v, **kwargs):  # noqa: E501
        """Download specific fileset  # noqa: E501

        For a given fileset return content (text, audio or video)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_download(fileset_id, book_id, chapter, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id fileset_id: The fileset ID (required)
        :param Id book_id: Will filter the results by the given book. For a complete list see the `book_id` field in the `/bibles/books` route. (required)
        :param ChapterStart chapter: Will filter the results by the given chapter (required)
        :param int v: The Version Number (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_download_with_http_info(fileset_id, book_id, chapter, v, **kwargs)  # noqa: E501

    def v4_download_with_http_info(self, fileset_id, book_id, chapter, v, **kwargs):  # noqa: E501
        """Download specific fileset  # noqa: E501

        For a given fileset return content (text, audio or video)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_download_with_http_info(fileset_id, book_id, chapter, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id fileset_id: The fileset ID (required)
        :param Id book_id: Will filter the results by the given book. For a complete list see the `book_id` field in the `/bibles/books` route. (required)
        :param ChapterStart chapter: Will filter the results by the given chapter (required)
        :param int v: The Version Number (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'fileset_id',
            'book_id',
            'chapter',
            'v'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_download" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'fileset_id' is set
        if self.api_client.client_side_validation and ('fileset_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['fileset_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `fileset_id` when calling `v4_download`")  # noqa: E501
        # verify the required parameter 'book_id' is set
        if self.api_client.client_side_validation and ('book_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['book_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `book_id` when calling `v4_download`")  # noqa: E501
        # verify the required parameter 'chapter' is set
        if self.api_client.client_side_validation and ('chapter' not in local_var_params or  # noqa: E501
                                                        local_var_params['chapter'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `chapter` when calling `v4_download`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fileset_id' in local_var_params:
            path_params['fileset_id'] = local_var_params['fileset_id']  # noqa: E501
        if 'book_id' in local_var_params:
            path_params['book_id'] = local_var_params['book_id']  # noqa: E501
        if 'chapter' in local_var_params:
            path_params['chapter'] = local_var_params['chapter']  # noqa: E501

        query_params = []
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/download/{fileset_id}/{book_id}/{chapter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_download_list(self, v, **kwargs):  # noqa: E501
        """List of filesets which can be downloaded for this API key  # noqa: E501

        List of filesets which can be downloaded for this API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_download_list(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param Id limit: The number of search results to return
        :param int page: The current page of the results
        :param str type: Filter by type of content (audio, video, text)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_download_list_with_http_info(v, **kwargs)  # noqa: E501

    def v4_download_list_with_http_info(self, v, **kwargs):  # noqa: E501
        """List of filesets which can be downloaded for this API key  # noqa: E501

        List of filesets which can be downloaded for this API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_download_list_with_http_info(v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int v: The Version Number (required)
        :param Id limit: The number of search results to return
        :param int page: The current page of the results
        :param str type: Filter by type of content (audio, video, text)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v',
            'limit',
            'page',
            'type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_download_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_download_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/download/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_timestamps_verse(self, fileset_id, book, chapter, v, **kwargs):  # noqa: E501
        """Returns audio timestamps for a chapter  # noqa: E501

        This route will return timestamps for a chapter. Note that the fileset id must be available via the path `/timestamps`. At first, only a few filesets may have timestamps metadata applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_timestamps_verse(fileset_id, book, chapter, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id fileset_id: The specific fileset to return references for (required)
        :param Id book: The Book ID for which to return timestamps. For a complete list see the `book_id` field in the `/bibles/books` route. (required)
        :param ChapterStart chapter: The chapter for which to return timestamps (required)
        :param int v: The Version Number (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V4AudioTimestamps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_timestamps_verse_with_http_info(fileset_id, book, chapter, v, **kwargs)  # noqa: E501

    def v4_timestamps_verse_with_http_info(self, fileset_id, book, chapter, v, **kwargs):  # noqa: E501
        """Returns audio timestamps for a chapter  # noqa: E501

        This route will return timestamps for a chapter. Note that the fileset id must be available via the path `/timestamps`. At first, only a few filesets may have timestamps metadata applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_timestamps_verse_with_http_info(fileset_id, book, chapter, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Id fileset_id: The specific fileset to return references for (required)
        :param Id book: The Book ID for which to return timestamps. For a complete list see the `book_id` field in the `/bibles/books` route. (required)
        :param ChapterStart chapter: The chapter for which to return timestamps (required)
        :param int v: The Version Number (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V4AudioTimestamps, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'fileset_id',
            'book',
            'chapter',
            'v'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_timestamps_verse" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'fileset_id' is set
        if self.api_client.client_side_validation and ('fileset_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['fileset_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `fileset_id` when calling `v4_timestamps_verse`")  # noqa: E501
        # verify the required parameter 'book' is set
        if self.api_client.client_side_validation and ('book' not in local_var_params or  # noqa: E501
                                                        local_var_params['book'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `book` when calling `v4_timestamps_verse`")  # noqa: E501
        # verify the required parameter 'chapter' is set
        if self.api_client.client_side_validation and ('chapter' not in local_var_params or  # noqa: E501
                                                        local_var_params['chapter'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `chapter` when calling `v4_timestamps_verse`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `v4_timestamps_verse`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fileset_id' in local_var_params:
            path_params['fileset_id'] = local_var_params['fileset_id']  # noqa: E501
        if 'book' in local_var_params:
            path_params['book'] = local_var_params['book']  # noqa: E501
        if 'chapter' in local_var_params:
            path_params['chapter'] = local_var_params['chapter']  # noqa: E501

        query_params = []
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['dbp_key']  # noqa: E501

        return self.api_client.call_api(
            '/timestamps/{fileset_id}/{book}/{chapter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V4AudioTimestamps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
