# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AlphabetFont(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'font_name': 'str',
        'font_filename': 'str',
        'font_weight': 'int',
        'copyright': 'str',
        'url': 'str',
        'notes': 'str',
        'italic': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'font_name': 'font_name',
        'font_filename': 'font_filename',
        'font_weight': 'font_weight',
        'copyright': 'copyright',
        'url': 'url',
        'notes': 'notes',
        'italic': 'italic'
    }

    def __init__(self, id=None, font_name=None, font_filename=None, font_weight=None, copyright=None, url=None, notes=None, italic=None, local_vars_configuration=None):  # noqa: E501
        """AlphabetFont - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._font_name = None
        self._font_filename = None
        self._font_weight = None
        self._copyright = None
        self._url = None
        self._notes = None
        self._italic = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if font_name is not None:
            self.font_name = font_name
        if font_filename is not None:
            self.font_filename = font_filename
        self.font_weight = font_weight
        self.copyright = copyright
        if url is not None:
            self.url = url
        self.notes = notes
        self.italic = italic

    @property
    def id(self):
        """Gets the id of this AlphabetFont.  # noqa: E501

        The incrementing numeric id for the alphabet fonts  # noqa: E501

        :return: The id of this AlphabetFont.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlphabetFont.

        The incrementing numeric id for the alphabet fonts  # noqa: E501

        :param id: The id of this AlphabetFont.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def font_name(self):
        """Gets the font_name of this AlphabetFont.  # noqa: E501

        The Font Name  # noqa: E501

        :return: The font_name of this AlphabetFont.  # noqa: E501
        :rtype: str
        """
        return self._font_name

    @font_name.setter
    def font_name(self, font_name):
        """Sets the font_name of this AlphabetFont.

        The Font Name  # noqa: E501

        :param font_name: The font_name of this AlphabetFont.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                font_name is not None and len(font_name) > 191):
            raise ValueError("Invalid value for `font_name`, length must be less than or equal to `191`")  # noqa: E501

        self._font_name = font_name

    @property
    def font_filename(self):
        """Gets the font_filename of this AlphabetFont.  # noqa: E501

        The File name for the font  # noqa: E501

        :return: The font_filename of this AlphabetFont.  # noqa: E501
        :rtype: str
        """
        return self._font_filename

    @font_filename.setter
    def font_filename(self, font_filename):
        """Sets the font_filename of this AlphabetFont.

        The File name for the font  # noqa: E501

        :param font_filename: The font_filename of this AlphabetFont.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                font_filename is not None and len(font_filename) > 191):
            raise ValueError("Invalid value for `font_filename`, length must be less than or equal to `191`")  # noqa: E501

        self._font_filename = font_filename

    @property
    def font_weight(self):
        """Gets the font_weight of this AlphabetFont.  # noqa: E501

        The boldness of the font  # noqa: E501

        :return: The font_weight of this AlphabetFont.  # noqa: E501
        :rtype: int
        """
        return self._font_weight

    @font_weight.setter
    def font_weight(self, font_weight):
        """Sets the font_weight of this AlphabetFont.

        The boldness of the font  # noqa: E501

        :param font_weight: The font_weight of this AlphabetFont.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                font_weight is not None and font_weight < 100):  # noqa: E501
            raise ValueError("Invalid value for `font_weight`, must be a value greater than or equal to `100`")  # noqa: E501

        self._font_weight = font_weight

    @property
    def copyright(self):
        """Gets the copyright of this AlphabetFont.  # noqa: E501

        The copyright of the font if any  # noqa: E501

        :return: The copyright of this AlphabetFont.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this AlphabetFont.

        The copyright of the font if any  # noqa: E501

        :param copyright: The copyright of this AlphabetFont.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                copyright is not None and len(copyright) > 191):
            raise ValueError("Invalid value for `copyright`, length must be less than or equal to `191`")  # noqa: E501

        self._copyright = copyright

    @property
    def url(self):
        """Gets the url of this AlphabetFont.  # noqa: E501

        The url to the font file  # noqa: E501

        :return: The url of this AlphabetFont.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AlphabetFont.

        The url to the font file  # noqa: E501

        :param url: The url of this AlphabetFont.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def notes(self):
        """Gets the notes of this AlphabetFont.  # noqa: E501

        Any notes for the font file name  # noqa: E501

        :return: The notes of this AlphabetFont.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AlphabetFont.

        Any notes for the font file name  # noqa: E501

        :param notes: The notes of this AlphabetFont.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def italic(self):
        """Gets the italic of this AlphabetFont.  # noqa: E501

        Determines if the font file contains or supports italics  # noqa: E501

        :return: The italic of this AlphabetFont.  # noqa: E501
        :rtype: bool
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this AlphabetFont.

        Determines if the font file contains or supports italics  # noqa: E501

        :param italic: The italic of this AlphabetFont.  # noqa: E501
        :type: bool
        """

        self._italic = italic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlphabetFont):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlphabetFont):
            return True

        return self.to_dict() != other.to_dict()
