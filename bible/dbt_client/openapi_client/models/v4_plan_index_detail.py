# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V4PlanIndexDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'Id',
        'name': 'Name',
        'featured': 'Featured',
        'thumbnail': 'Thumbnail',
        'suggested_start_date': 'SuggestedStartDate',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'start_date': 'StartDate',
        'percentage_completed': 'PercentageCompleted',
        'user': 'V4PlanIndexUser',
        'total_days': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'featured': 'featured',
        'thumbnail': 'thumbnail',
        'suggested_start_date': 'suggested_start_date',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'start_date': 'start_date',
        'percentage_completed': 'percentage_completed',
        'user': 'user',
        'total_days': 'total_days'
    }

    def __init__(self, id=None, name=None, featured=None, thumbnail=None, suggested_start_date=None, created_at=None, updated_at=None, start_date=None, percentage_completed=None, user=None, total_days=None, local_vars_configuration=None):  # noqa: E501
        """V4PlanIndexDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._featured = None
        self._thumbnail = None
        self._suggested_start_date = None
        self._created_at = None
        self._updated_at = None
        self._start_date = None
        self._percentage_completed = None
        self._user = None
        self._total_days = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if featured is not None:
            self.featured = featured
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if suggested_start_date is not None:
            self.suggested_start_date = suggested_start_date
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if start_date is not None:
            self.start_date = start_date
        if percentage_completed is not None:
            self.percentage_completed = percentage_completed
        if user is not None:
            self.user = user
        if total_days is not None:
            self.total_days = total_days

    @property
    def id(self):
        """Gets the id of this V4PlanIndexDetail.  # noqa: E501


        :return: The id of this V4PlanIndexDetail.  # noqa: E501
        :rtype: Id
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V4PlanIndexDetail.


        :param id: The id of this V4PlanIndexDetail.  # noqa: E501
        :type: Id
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this V4PlanIndexDetail.  # noqa: E501


        :return: The name of this V4PlanIndexDetail.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V4PlanIndexDetail.


        :param name: The name of this V4PlanIndexDetail.  # noqa: E501
        :type: Name
        """

        self._name = name

    @property
    def featured(self):
        """Gets the featured of this V4PlanIndexDetail.  # noqa: E501


        :return: The featured of this V4PlanIndexDetail.  # noqa: E501
        :rtype: Featured
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this V4PlanIndexDetail.


        :param featured: The featured of this V4PlanIndexDetail.  # noqa: E501
        :type: Featured
        """

        self._featured = featured

    @property
    def thumbnail(self):
        """Gets the thumbnail of this V4PlanIndexDetail.  # noqa: E501


        :return: The thumbnail of this V4PlanIndexDetail.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this V4PlanIndexDetail.


        :param thumbnail: The thumbnail of this V4PlanIndexDetail.  # noqa: E501
        :type: Thumbnail
        """

        self._thumbnail = thumbnail

    @property
    def suggested_start_date(self):
        """Gets the suggested_start_date of this V4PlanIndexDetail.  # noqa: E501


        :return: The suggested_start_date of this V4PlanIndexDetail.  # noqa: E501
        :rtype: SuggestedStartDate
        """
        return self._suggested_start_date

    @suggested_start_date.setter
    def suggested_start_date(self, suggested_start_date):
        """Sets the suggested_start_date of this V4PlanIndexDetail.


        :param suggested_start_date: The suggested_start_date of this V4PlanIndexDetail.  # noqa: E501
        :type: SuggestedStartDate
        """

        self._suggested_start_date = suggested_start_date

    @property
    def created_at(self):
        """Gets the created_at of this V4PlanIndexDetail.  # noqa: E501


        :return: The created_at of this V4PlanIndexDetail.  # noqa: E501
        :rtype: CreatedAt
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V4PlanIndexDetail.


        :param created_at: The created_at of this V4PlanIndexDetail.  # noqa: E501
        :type: CreatedAt
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V4PlanIndexDetail.  # noqa: E501


        :return: The updated_at of this V4PlanIndexDetail.  # noqa: E501
        :rtype: UpdatedAt
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V4PlanIndexDetail.


        :param updated_at: The updated_at of this V4PlanIndexDetail.  # noqa: E501
        :type: UpdatedAt
        """

        self._updated_at = updated_at

    @property
    def start_date(self):
        """Gets the start_date of this V4PlanIndexDetail.  # noqa: E501


        :return: The start_date of this V4PlanIndexDetail.  # noqa: E501
        :rtype: StartDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this V4PlanIndexDetail.


        :param start_date: The start_date of this V4PlanIndexDetail.  # noqa: E501
        :type: StartDate
        """

        self._start_date = start_date

    @property
    def percentage_completed(self):
        """Gets the percentage_completed of this V4PlanIndexDetail.  # noqa: E501


        :return: The percentage_completed of this V4PlanIndexDetail.  # noqa: E501
        :rtype: PercentageCompleted
        """
        return self._percentage_completed

    @percentage_completed.setter
    def percentage_completed(self, percentage_completed):
        """Sets the percentage_completed of this V4PlanIndexDetail.


        :param percentage_completed: The percentage_completed of this V4PlanIndexDetail.  # noqa: E501
        :type: PercentageCompleted
        """

        self._percentage_completed = percentage_completed

    @property
    def user(self):
        """Gets the user of this V4PlanIndexDetail.  # noqa: E501


        :return: The user of this V4PlanIndexDetail.  # noqa: E501
        :rtype: V4PlanIndexUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V4PlanIndexDetail.


        :param user: The user of this V4PlanIndexDetail.  # noqa: E501
        :type: V4PlanIndexUser
        """

        self._user = user

    @property
    def total_days(self):
        """Gets the total_days of this V4PlanIndexDetail.  # noqa: E501


        :return: The total_days of this V4PlanIndexDetail.  # noqa: E501
        :rtype: int
        """
        return self._total_days

    @total_days.setter
    def total_days(self, total_days):
        """Sets the total_days of this V4PlanIndexDetail.


        :param total_days: The total_days of this V4PlanIndexDetail.  # noqa: E501
        :type: int
        """

        self._total_days = total_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4PlanIndexDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4PlanIndexDetail):
            return True

        return self.to_dict() != other.to_dict()
