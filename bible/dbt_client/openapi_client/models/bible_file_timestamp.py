# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleFileTimestamp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'verse_start': 'str',
        'verse_end': 'int',
        'verse_sequence': 'int',
        'timestamp': 'float'
    }

    attribute_map = {
        'id': 'id',
        'verse_start': 'verse_start',
        'verse_end': 'verse_end',
        'verse_sequence': 'verse_sequence',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, verse_start=None, verse_end=None, verse_sequence=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """BibleFileTimestamp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._verse_start = None
        self._verse_end = None
        self._verse_sequence = None
        self._timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if verse_start is not None:
            self.verse_start = verse_start
        if verse_end is not None:
            self.verse_end = verse_end
        if verse_sequence is not None:
            self.verse_sequence = verse_sequence
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this BibleFileTimestamp.  # noqa: E501

        The incrementing id of the file timestamp  # noqa: E501

        :return: The id of this BibleFileTimestamp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BibleFileTimestamp.

        The incrementing id of the file timestamp  # noqa: E501

        :param id: The id of this BibleFileTimestamp.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def verse_start(self):
        """Gets the verse_start of this BibleFileTimestamp.  # noqa: E501

        The starting verse for the file timestamp  # noqa: E501

        :return: The verse_start of this BibleFileTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this BibleFileTimestamp.

        The starting verse for the file timestamp  # noqa: E501

        :param verse_start: The verse_start of this BibleFileTimestamp.  # noqa: E501
        :type: str
        """

        self._verse_start = verse_start

    @property
    def verse_end(self):
        """Gets the verse_end of this BibleFileTimestamp.  # noqa: E501

        The ending verse for the file timestamp  # noqa: E501

        :return: The verse_end of this BibleFileTimestamp.  # noqa: E501
        :rtype: int
        """
        return self._verse_end

    @verse_end.setter
    def verse_end(self, verse_end):
        """Sets the verse_end of this BibleFileTimestamp.

        The ending verse for the file timestamp  # noqa: E501

        :param verse_end: The verse_end of this BibleFileTimestamp.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                verse_end is not None and verse_end < 1):  # noqa: E501
            raise ValueError("Invalid value for `verse_end`, must be a value greater than or equal to `1`")  # noqa: E501

        self._verse_end = verse_end

    @property
    def verse_sequence(self):
        """Gets the verse_sequence of this BibleFileTimestamp.  # noqa: E501

        The starting verse for the bible file but with format = integer  # noqa: E501

        :return: The verse_sequence of this BibleFileTimestamp.  # noqa: E501
        :rtype: int
        """
        return self._verse_sequence

    @verse_sequence.setter
    def verse_sequence(self, verse_sequence):
        """Sets the verse_sequence of this BibleFileTimestamp.

        The starting verse for the bible file but with format = integer  # noqa: E501

        :param verse_sequence: The verse_sequence of this BibleFileTimestamp.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                verse_sequence is not None and verse_sequence < 1):  # noqa: E501
            raise ValueError("Invalid value for `verse_sequence`, must be a value greater than or equal to `1`")  # noqa: E501

        self._verse_sequence = verse_sequence

    @property
    def timestamp(self):
        """Gets the timestamp of this BibleFileTimestamp.  # noqa: E501

        The time (in seconds) represented by the timestamp  # noqa: E501

        :return: The timestamp of this BibleFileTimestamp.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BibleFileTimestamp.

        The time (in seconds) represented by the timestamp  # noqa: E501

        :param timestamp: The timestamp of this BibleFileTimestamp.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                timestamp is not None and timestamp < 1):  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleFileTimestamp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleFileTimestamp):
            return True

        return self.to_dict() != other.to_dict()
