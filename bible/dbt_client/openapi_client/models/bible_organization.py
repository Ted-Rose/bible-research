# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleOrganization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bible_id': 'Id',
        'organization_id': 'Id',
        'relationship_type': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'bible_id': 'bible_id',
        'organization_id': 'organization_id',
        'relationship_type': 'relationship_type',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, bible_id=None, organization_id=None, relationship_type=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """BibleOrganization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bible_id = None
        self._organization_id = None
        self._relationship_type = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if bible_id is not None:
            self.bible_id = bible_id
        if organization_id is not None:
            self.organization_id = organization_id
        if relationship_type is not None:
            self.relationship_type = relationship_type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def bible_id(self):
        """Gets the bible_id of this BibleOrganization.  # noqa: E501


        :return: The bible_id of this BibleOrganization.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this BibleOrganization.


        :param bible_id: The bible_id of this BibleOrganization.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def organization_id(self):
        """Gets the organization_id of this BibleOrganization.  # noqa: E501


        :return: The organization_id of this BibleOrganization.  # noqa: E501
        :rtype: Id
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this BibleOrganization.


        :param organization_id: The organization_id of this BibleOrganization.  # noqa: E501
        :type: Id
        """

        self._organization_id = organization_id

    @property
    def relationship_type(self):
        """Gets the relationship_type of this BibleOrganization.  # noqa: E501

        Relationship between Bible and Organization  # noqa: E501

        :return: The relationship_type of this BibleOrganization.  # noqa: E501
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this BibleOrganization.

        Relationship between Bible and Organization  # noqa: E501

        :param relationship_type: The relationship_type of this BibleOrganization.  # noqa: E501
        :type: str
        """

        self._relationship_type = relationship_type

    @property
    def created_at(self):
        """Gets the created_at of this BibleOrganization.  # noqa: E501


        :return: The created_at of this BibleOrganization.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BibleOrganization.


        :param created_at: The created_at of this BibleOrganization.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BibleOrganization.  # noqa: E501


        :return: The updated_at of this BibleOrganization.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BibleOrganization.


        :param updated_at: The updated_at of this BibleOrganization.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleOrganization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleOrganization):
            return True

        return self.to_dict() != other.to_dict()
