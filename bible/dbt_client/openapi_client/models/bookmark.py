# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Bookmark(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'book_id': 'Id',
        'chapter': 'ChapterStart',
        'verse_start': 'VerseStart',
        'verse_sequence': 'VerseSequence',
        'user_id': 'Id',
        'bible_id': 'Id',
        'updated_at': 'str',
        'created_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'book_id': 'book_id',
        'chapter': 'chapter',
        'verse_start': 'verse_start',
        'verse_sequence': 'verse_sequence',
        'user_id': 'user_id',
        'bible_id': 'bible_id',
        'updated_at': 'updated_at',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, book_id=None, chapter=None, verse_start=None, verse_sequence=None, user_id=None, bible_id=None, updated_at=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """Bookmark - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._book_id = None
        self._chapter = None
        self._verse_start = None
        self._verse_sequence = None
        self._user_id = None
        self._bible_id = None
        self._updated_at = None
        self._created_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if book_id is not None:
            self.book_id = book_id
        if chapter is not None:
            self.chapter = chapter
        if verse_start is not None:
            self.verse_start = verse_start
        if verse_sequence is not None:
            self.verse_sequence = verse_sequence
        if user_id is not None:
            self.user_id = user_id
        if bible_id is not None:
            self.bible_id = bible_id
        self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this Bookmark.  # noqa: E501

        The unique incrementing id for each Bookmark  # noqa: E501

        :return: The id of this Bookmark.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bookmark.

        The unique incrementing id for each Bookmark  # noqa: E501

        :param id: The id of this Bookmark.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def book_id(self):
        """Gets the book_id of this Bookmark.  # noqa: E501


        :return: The book_id of this Bookmark.  # noqa: E501
        :rtype: Id
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this Bookmark.


        :param book_id: The book_id of this Bookmark.  # noqa: E501
        :type: Id
        """

        self._book_id = book_id

    @property
    def chapter(self):
        """Gets the chapter of this Bookmark.  # noqa: E501


        :return: The chapter of this Bookmark.  # noqa: E501
        :rtype: ChapterStart
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter):
        """Sets the chapter of this Bookmark.


        :param chapter: The chapter of this Bookmark.  # noqa: E501
        :type: ChapterStart
        """

        self._chapter = chapter

    @property
    def verse_start(self):
        """Gets the verse_start of this Bookmark.  # noqa: E501


        :return: The verse_start of this Bookmark.  # noqa: E501
        :rtype: VerseStart
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this Bookmark.


        :param verse_start: The verse_start of this Bookmark.  # noqa: E501
        :type: VerseStart
        """

        self._verse_start = verse_start

    @property
    def verse_sequence(self):
        """Gets the verse_sequence of this Bookmark.  # noqa: E501


        :return: The verse_sequence of this Bookmark.  # noqa: E501
        :rtype: VerseSequence
        """
        return self._verse_sequence

    @verse_sequence.setter
    def verse_sequence(self, verse_sequence):
        """Sets the verse_sequence of this Bookmark.


        :param verse_sequence: The verse_sequence of this Bookmark.  # noqa: E501
        :type: VerseSequence
        """

        self._verse_sequence = verse_sequence

    @property
    def user_id(self):
        """Gets the user_id of this Bookmark.  # noqa: E501


        :return: The user_id of this Bookmark.  # noqa: E501
        :rtype: Id
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Bookmark.


        :param user_id: The user_id of this Bookmark.  # noqa: E501
        :type: Id
        """

        self._user_id = user_id

    @property
    def bible_id(self):
        """Gets the bible_id of this Bookmark.  # noqa: E501


        :return: The bible_id of this Bookmark.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this Bookmark.


        :param bible_id: The bible_id of this Bookmark.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Bookmark.  # noqa: E501

        The timestamp the Note was last updated at  # noqa: E501

        :return: The updated_at of this Bookmark.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Bookmark.

        The timestamp the Note was last updated at  # noqa: E501

        :param updated_at: The updated_at of this Bookmark.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Bookmark.  # noqa: E501

        The timestamp the note was created at  # noqa: E501

        :return: The created_at of this Bookmark.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Bookmark.

        The timestamp the note was created at  # noqa: E501

        :param created_at: The created_at of this Bookmark.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bookmark):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Bookmark):
            return True

        return self.to_dict() != other.to_dict()
