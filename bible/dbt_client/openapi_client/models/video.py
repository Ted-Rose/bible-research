# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Video(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'language_id': 'str',
        'bible_id': 'str',
        'series': 'str',
        'episode': 'str',
        'section': 'str',
        'url': 'str',
        'url_download': 'str',
        'picture': 'str',
        'duration': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'language_id': 'language_id',
        'bible_id': 'bible_id',
        'series': 'series',
        'episode': 'episode',
        'section': 'section',
        'url': 'url',
        'url_download': 'url_download',
        'picture': 'picture',
        'duration': 'duration',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, language_id=None, bible_id=None, series=None, episode=None, section=None, url=None, url_download=None, picture=None, duration=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Video - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._language_id = None
        self._bible_id = None
        self._series = None
        self._episode = None
        self._section = None
        self._url = None
        self._url_download = None
        self._picture = None
        self._duration = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if language_id is not None:
            self.language_id = language_id
        if bible_id is not None:
            self.bible_id = bible_id
        if series is not None:
            self.series = series
        if episode is not None:
            self.episode = episode
        if section is not None:
            self.section = section
        if url is not None:
            self.url = url
        if url_download is not None:
            self.url_download = url_download
        if picture is not None:
            self.picture = picture
        if duration is not None:
            self.duration = duration
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Video.  # noqa: E501


        :return: The id of this Video.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Video.


        :param id: The id of this Video.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def language_id(self):
        """Gets the language_id of this Video.  # noqa: E501


        :return: The language_id of this Video.  # noqa: E501
        :rtype: str
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this Video.


        :param language_id: The language_id of this Video.  # noqa: E501
        :type: str
        """

        self._language_id = language_id

    @property
    def bible_id(self):
        """Gets the bible_id of this Video.  # noqa: E501


        :return: The bible_id of this Video.  # noqa: E501
        :rtype: str
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this Video.


        :param bible_id: The bible_id of this Video.  # noqa: E501
        :type: str
        """

        self._bible_id = bible_id

    @property
    def series(self):
        """Gets the series of this Video.  # noqa: E501


        :return: The series of this Video.  # noqa: E501
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this Video.


        :param series: The series of this Video.  # noqa: E501
        :type: str
        """

        self._series = series

    @property
    def episode(self):
        """Gets the episode of this Video.  # noqa: E501


        :return: The episode of this Video.  # noqa: E501
        :rtype: str
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this Video.


        :param episode: The episode of this Video.  # noqa: E501
        :type: str
        """

        self._episode = episode

    @property
    def section(self):
        """Gets the section of this Video.  # noqa: E501


        :return: The section of this Video.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this Video.


        :param section: The section of this Video.  # noqa: E501
        :type: str
        """

        self._section = section

    @property
    def url(self):
        """Gets the url of this Video.  # noqa: E501


        :return: The url of this Video.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Video.


        :param url: The url of this Video.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_download(self):
        """Gets the url_download of this Video.  # noqa: E501


        :return: The url_download of this Video.  # noqa: E501
        :rtype: str
        """
        return self._url_download

    @url_download.setter
    def url_download(self, url_download):
        """Sets the url_download of this Video.


        :param url_download: The url_download of this Video.  # noqa: E501
        :type: str
        """

        self._url_download = url_download

    @property
    def picture(self):
        """Gets the picture of this Video.  # noqa: E501


        :return: The picture of this Video.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this Video.


        :param picture: The picture of this Video.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def duration(self):
        """Gets the duration of this Video.  # noqa: E501


        :return: The duration of this Video.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Video.


        :param duration: The duration of this Video.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def created_at(self):
        """Gets the created_at of this Video.  # noqa: E501


        :return: The created_at of this Video.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Video.


        :param created_at: The created_at of this Video.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Video.  # noqa: E501


        :return: The updated_at of this Video.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Video.


        :param updated_at: The updated_at of this Video.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Video):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Video):
            return True

        return self.to_dict() != other.to_dict()
