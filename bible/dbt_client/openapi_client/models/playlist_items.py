# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PlaylistItems(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed': 'bool',
        'full_chapter': 'bool',
        'path': 'str',
        'metadata': 'Metadata',
        'id': 'int',
        'playlist_id': 'int',
        'fileset_id': 'str',
        'book_id': 'str',
        'chapter_start': 'int',
        'chapter_end': 'int',
        'verse_start': 'str',
        'verse_sequence': 'int',
        'verse_end': 'int',
        'duration': 'int',
        'verses': 'int',
        'updated_at': 'str',
        'created_at': 'str'
    }

    attribute_map = {
        'completed': 'completed',
        'full_chapter': 'full_chapter',
        'path': 'path',
        'metadata': 'metadata',
        'id': 'id',
        'playlist_id': 'playlist_id',
        'fileset_id': 'fileset_id',
        'book_id': 'book_id',
        'chapter_start': 'chapter_start',
        'chapter_end': 'chapter_end',
        'verse_start': 'verse_start',
        'verse_sequence': 'verse_sequence',
        'verse_end': 'verse_end',
        'duration': 'duration',
        'verses': 'verses',
        'updated_at': 'updated_at',
        'created_at': 'created_at'
    }

    def __init__(self, completed=None, full_chapter=None, path=None, metadata=None, id=None, playlist_id=None, fileset_id=None, book_id=None, chapter_start=None, chapter_end=None, verse_start=None, verse_sequence=None, verse_end=None, duration=None, verses=None, updated_at=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """PlaylistItems - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completed = None
        self._full_chapter = None
        self._path = None
        self._metadata = None
        self._id = None
        self._playlist_id = None
        self._fileset_id = None
        self._book_id = None
        self._chapter_start = None
        self._chapter_end = None
        self._verse_start = None
        self._verse_sequence = None
        self._verse_end = None
        self._duration = None
        self._verses = None
        self._updated_at = None
        self._created_at = None
        self.discriminator = None

        if completed is not None:
            self.completed = completed
        if full_chapter is not None:
            self.full_chapter = full_chapter
        if path is not None:
            self.path = path
        if metadata is not None:
            self.metadata = metadata
        if id is not None:
            self.id = id
        if playlist_id is not None:
            self.playlist_id = playlist_id
        if fileset_id is not None:
            self.fileset_id = fileset_id
        if book_id is not None:
            self.book_id = book_id
        if chapter_start is not None:
            self.chapter_start = chapter_start
        self.chapter_end = chapter_end
        if verse_start is not None:
            self.verse_start = verse_start
        if verse_sequence is not None:
            self.verse_sequence = verse_sequence
        self.verse_end = verse_end
        if duration is not None:
            self.duration = duration
        if verses is not None:
            self.verses = verses
        self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at

    @property
    def completed(self):
        """Gets the completed of this PlaylistItems.  # noqa: E501

        If the playlist item is completed  # noqa: E501

        :return: The completed of this PlaylistItems.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this PlaylistItems.

        If the playlist item is completed  # noqa: E501

        :param completed: The completed of this PlaylistItems.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def full_chapter(self):
        """Gets the full_chapter of this PlaylistItems.  # noqa: E501

        If the playlist item is a full chapter item  # noqa: E501

        :return: The full_chapter of this PlaylistItems.  # noqa: E501
        :rtype: bool
        """
        return self._full_chapter

    @full_chapter.setter
    def full_chapter(self, full_chapter):
        """Sets the full_chapter of this PlaylistItems.

        If the playlist item is a full chapter item  # noqa: E501

        :param full_chapter: The full_chapter of this PlaylistItems.  # noqa: E501
        :type: bool
        """

        self._full_chapter = full_chapter

    @property
    def path(self):
        """Gets the path of this PlaylistItems.  # noqa: E501

        Hls path of the playlist item  # noqa: E501

        :return: The path of this PlaylistItems.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PlaylistItems.

        Hls path of the playlist item  # noqa: E501

        :param path: The path of this PlaylistItems.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def metadata(self):
        """Gets the metadata of this PlaylistItems.  # noqa: E501


        :return: The metadata of this PlaylistItems.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PlaylistItems.


        :param metadata: The metadata of this PlaylistItems.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this PlaylistItems.  # noqa: E501

        The playlist item id  # noqa: E501

        :return: The id of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistItems.

        The playlist item id  # noqa: E501

        :param id: The id of this PlaylistItems.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def playlist_id(self):
        """Gets the playlist_id of this PlaylistItems.  # noqa: E501

        The playlist id  # noqa: E501

        :return: The playlist_id of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._playlist_id

    @playlist_id.setter
    def playlist_id(self, playlist_id):
        """Sets the playlist_id of this PlaylistItems.

        The playlist id  # noqa: E501

        :param playlist_id: The playlist_id of this PlaylistItems.  # noqa: E501
        :type: int
        """

        self._playlist_id = playlist_id

    @property
    def fileset_id(self):
        """Gets the fileset_id of this PlaylistItems.  # noqa: E501

        The fileset id  # noqa: E501

        :return: The fileset_id of this PlaylistItems.  # noqa: E501
        :rtype: str
        """
        return self._fileset_id

    @fileset_id.setter
    def fileset_id(self, fileset_id):
        """Sets the fileset_id of this PlaylistItems.

        The fileset id  # noqa: E501

        :param fileset_id: The fileset_id of this PlaylistItems.  # noqa: E501
        :type: str
        """

        self._fileset_id = fileset_id

    @property
    def book_id(self):
        """Gets the book_id of this PlaylistItems.  # noqa: E501

        The book_id  # noqa: E501

        :return: The book_id of this PlaylistItems.  # noqa: E501
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this PlaylistItems.

        The book_id  # noqa: E501

        :param book_id: The book_id of this PlaylistItems.  # noqa: E501
        :type: str
        """

        self._book_id = book_id

    @property
    def chapter_start(self):
        """Gets the chapter_start of this PlaylistItems.  # noqa: E501

        The chapter_start  # noqa: E501

        :return: The chapter_start of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._chapter_start

    @chapter_start.setter
    def chapter_start(self, chapter_start):
        """Sets the chapter_start of this PlaylistItems.

        The chapter_start  # noqa: E501

        :param chapter_start: The chapter_start of this PlaylistItems.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                chapter_start is not None and chapter_start > 150):  # noqa: E501
            raise ValueError("Invalid value for `chapter_start`, must be a value less than or equal to `150`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                chapter_start is not None and chapter_start < 0):  # noqa: E501
            raise ValueError("Invalid value for `chapter_start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._chapter_start = chapter_start

    @property
    def chapter_end(self):
        """Gets the chapter_end of this PlaylistItems.  # noqa: E501

        If the Bible File spans multiple chapters this field indicates the last chapter of the selection  # noqa: E501

        :return: The chapter_end of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._chapter_end

    @chapter_end.setter
    def chapter_end(self, chapter_end):
        """Sets the chapter_end of this PlaylistItems.

        If the Bible File spans multiple chapters this field indicates the last chapter of the selection  # noqa: E501

        :param chapter_end: The chapter_end of this PlaylistItems.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                chapter_end is not None and chapter_end > 150):  # noqa: E501
            raise ValueError("Invalid value for `chapter_end`, must be a value less than or equal to `150`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                chapter_end is not None and chapter_end < 0):  # noqa: E501
            raise ValueError("Invalid value for `chapter_end`, must be a value greater than or equal to `0`")  # noqa: E501

        self._chapter_end = chapter_end

    @property
    def verse_start(self):
        """Gets the verse_start of this PlaylistItems.  # noqa: E501

        The starting verse at which the BibleFile reference begins  # noqa: E501

        :return: The verse_start of this PlaylistItems.  # noqa: E501
        :rtype: str
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this PlaylistItems.

        The starting verse at which the BibleFile reference begins  # noqa: E501

        :param verse_start: The verse_start of this PlaylistItems.  # noqa: E501
        :type: str
        """

        self._verse_start = verse_start

    @property
    def verse_sequence(self):
        """Gets the verse_sequence of this PlaylistItems.  # noqa: E501

        The starting verse at which the BibleFile reference begins  # noqa: E501

        :return: The verse_sequence of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._verse_sequence

    @verse_sequence.setter
    def verse_sequence(self, verse_sequence):
        """Sets the verse_sequence of this PlaylistItems.

        The starting verse at which the BibleFile reference begins  # noqa: E501

        :param verse_sequence: The verse_sequence of this PlaylistItems.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                verse_sequence is not None and verse_sequence > 176):  # noqa: E501
            raise ValueError("Invalid value for `verse_sequence`, must be a value less than or equal to `176`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                verse_sequence is not None and verse_sequence < 1):  # noqa: E501
            raise ValueError("Invalid value for `verse_sequence`, must be a value greater than or equal to `1`")  # noqa: E501

        self._verse_sequence = verse_sequence

    @property
    def verse_end(self):
        """Gets the verse_end of this PlaylistItems.  # noqa: E501

        If the Bible File spans multiple verses this value will indicate the last verse in that reference. This value is inclusive, so for the reference John 1:1-4. The value would be 4 and the reference would contain verse 4.  # noqa: E501

        :return: The verse_end of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._verse_end

    @verse_end.setter
    def verse_end(self, verse_end):
        """Sets the verse_end of this PlaylistItems.

        If the Bible File spans multiple verses this value will indicate the last verse in that reference. This value is inclusive, so for the reference John 1:1-4. The value would be 4 and the reference would contain verse 4.  # noqa: E501

        :param verse_end: The verse_end of this PlaylistItems.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                verse_end is not None and verse_end > 176):  # noqa: E501
            raise ValueError("Invalid value for `verse_end`, must be a value less than or equal to `176`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                verse_end is not None and verse_end < 1):  # noqa: E501
            raise ValueError("Invalid value for `verse_end`, must be a value greater than or equal to `1`")  # noqa: E501

        self._verse_end = verse_end

    @property
    def duration(self):
        """Gets the duration of this PlaylistItems.  # noqa: E501

        The playlist item calculated duration  # noqa: E501

        :return: The duration of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PlaylistItems.

        The playlist item calculated duration  # noqa: E501

        :param duration: The duration of this PlaylistItems.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def verses(self):
        """Gets the verses of this PlaylistItems.  # noqa: E501

        The playlist item verses count  # noqa: E501

        :return: The verses of this PlaylistItems.  # noqa: E501
        :rtype: int
        """
        return self._verses

    @verses.setter
    def verses(self, verses):
        """Sets the verses of this PlaylistItems.

        The playlist item verses count  # noqa: E501

        :param verses: The verses of this PlaylistItems.  # noqa: E501
        :type: int
        """

        self._verses = verses

    @property
    def updated_at(self):
        """Gets the updated_at of this PlaylistItems.  # noqa: E501

        The timestamp the playlist item was last updated at  # noqa: E501

        :return: The updated_at of this PlaylistItems.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PlaylistItems.

        The timestamp the playlist item was last updated at  # noqa: E501

        :param updated_at: The updated_at of this PlaylistItems.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this PlaylistItems.  # noqa: E501

        The timestamp the playlist item was created at  # noqa: E501

        :return: The created_at of this PlaylistItems.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PlaylistItems.

        The timestamp the playlist item was created at  # noqa: E501

        :param created_at: The created_at of this PlaylistItems.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaylistItems):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlaylistItems):
            return True

        return self.to_dict() != other.to_dict()
