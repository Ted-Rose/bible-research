# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Country(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'iso_a3': 'str',
        'fips': 'str',
        'continent': 'str',
        'name': 'str',
        'introduction': 'str'
    }

    attribute_map = {
        'id': 'id',
        'iso_a3': 'iso_a3',
        'fips': 'fips',
        'continent': 'continent',
        'name': 'name',
        'introduction': 'introduction'
    }

    def __init__(self, id=None, iso_a3=None, fips=None, continent=None, name=None, introduction=None, local_vars_configuration=None):  # noqa: E501
        """Country - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._iso_a3 = None
        self._fips = None
        self._continent = None
        self._name = None
        self._introduction = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if iso_a3 is not None:
            self.iso_a3 = iso_a3
        if fips is not None:
            self.fips = fips
        if continent is not None:
            self.continent = continent
        if name is not None:
            self.name = name
        if introduction is not None:
            self.introduction = introduction

    @property
    def id(self):
        """Gets the id of this Country.  # noqa: E501

        The Country ID for the country aligning with the ISO 3166-1 standard  # noqa: E501

        :return: The id of this Country.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Country.

        The Country ID for the country aligning with the ISO 3166-1 standard  # noqa: E501

        :param id: The id of this Country.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 2):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 2):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `2`")  # noqa: E501

        self._id = id

    @property
    def iso_a3(self):
        """Gets the iso_a3 of this Country.  # noqa: E501

        The Country iso for the country aligning with the ISO 3166-3 standard  # noqa: E501

        :return: The iso_a3 of this Country.  # noqa: E501
        :rtype: str
        """
        return self._iso_a3

    @iso_a3.setter
    def iso_a3(self, iso_a3):
        """Sets the iso_a3 of this Country.

        The Country iso for the country aligning with the ISO 3166-3 standard  # noqa: E501

        :param iso_a3: The iso_a3 of this Country.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                iso_a3 is not None and len(iso_a3) > 3):
            raise ValueError("Invalid value for `iso_a3`, length must be less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                iso_a3 is not None and len(iso_a3) < 3):
            raise ValueError("Invalid value for `iso_a3`, length must be greater than or equal to `3`")  # noqa: E501

        self._iso_a3 = iso_a3

    @property
    def fips(self):
        """Gets the fips of this Country.  # noqa: E501

        The Country id for the country aligning with the FIPS standard of the United Nations  # noqa: E501

        :return: The fips of this Country.  # noqa: E501
        :rtype: str
        """
        return self._fips

    @fips.setter
    def fips(self, fips):
        """Sets the fips of this Country.

        The Country id for the country aligning with the FIPS standard of the United Nations  # noqa: E501

        :param fips: The fips of this Country.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                fips is not None and len(fips) > 2):
            raise ValueError("Invalid value for `fips`, length must be less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                fips is not None and len(fips) < 2):
            raise ValueError("Invalid value for `fips`, length must be greater than or equal to `2`")  # noqa: E501

        self._fips = fips

    @property
    def continent(self):
        """Gets the continent of this Country.  # noqa: E501

        The continent code for the country  # noqa: E501

        :return: The continent of this Country.  # noqa: E501
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this Country.

        The continent code for the country  # noqa: E501

        :param continent: The continent of this Country.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                continent is not None and len(continent) > 2):
            raise ValueError("Invalid value for `continent`, length must be less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                continent is not None and len(continent) < 2):
            raise ValueError("Invalid value for `continent`, length must be greater than or equal to `2`")  # noqa: E501

        self._continent = continent

    @property
    def name(self):
        """Gets the name of this Country.  # noqa: E501

        The name for the country in English  # noqa: E501

        :return: The name of this Country.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Country.

        The name for the country in English  # noqa: E501

        :param name: The name of this Country.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 191):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `191`")  # noqa: E501

        self._name = name

    @property
    def introduction(self):
        """Gets the introduction of this Country.  # noqa: E501

        A brief description of the country in English  # noqa: E501

        :return: The introduction of this Country.  # noqa: E501
        :rtype: str
        """
        return self._introduction

    @introduction.setter
    def introduction(self, introduction):
        """Sets the introduction of this Country.

        A brief description of the country in English  # noqa: E501

        :param introduction: The introduction of this Country.  # noqa: E501
        :type: str
        """

        self._introduction = introduction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Country):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Country):
            return True

        return self.to_dict() != other.to_dict()
