# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'book_id': 'str',
        'chapter_start': 'str',
        'verse_sequence': 'int',
        'chapter_end': 'str',
        'verse_start': 'str',
        'verse_end': 'str',
        'verse_text': 'str',
        'file_name': 'str',
        'file_size': 'int',
        'duration': 'int'
    }

    attribute_map = {
        'id': 'id',
        'book_id': 'book_id',
        'chapter_start': 'chapter_start',
        'verse_sequence': 'verse_sequence',
        'chapter_end': 'chapter_end',
        'verse_start': 'verse_start',
        'verse_end': 'verse_end',
        'verse_text': 'verse_text',
        'file_name': 'file_name',
        'file_size': 'file_size',
        'duration': 'duration'
    }

    def __init__(self, id=None, book_id=None, chapter_start=None, verse_sequence=None, chapter_end=None, verse_start=None, verse_end=None, verse_text=None, file_name=None, file_size=None, duration=None, local_vars_configuration=None):  # noqa: E501
        """BibleFile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._book_id = None
        self._chapter_start = None
        self._verse_sequence = None
        self._chapter_end = None
        self._verse_start = None
        self._verse_end = None
        self._verse_text = None
        self._file_name = None
        self._file_size = None
        self._duration = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if book_id is not None:
            self.book_id = book_id
        if chapter_start is not None:
            self.chapter_start = chapter_start
        if verse_sequence is not None:
            self.verse_sequence = verse_sequence
        self.chapter_end = chapter_end
        if verse_start is not None:
            self.verse_start = verse_start
        self.verse_end = verse_end
        if verse_text is not None:
            self.verse_text = verse_text
        if file_name is not None:
            self.file_name = file_name
        if file_size is not None:
            self.file_size = file_size
        self.duration = duration

    @property
    def id(self):
        """Gets the id of this BibleFile.  # noqa: E501

        The id  # noqa: E501

        :return: The id of this BibleFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BibleFile.

        The id  # noqa: E501

        :param id: The id of this BibleFile.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def book_id(self):
        """Gets the book_id of this BibleFile.  # noqa: E501

        The book_id  # noqa: E501

        :return: The book_id of this BibleFile.  # noqa: E501
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this BibleFile.

        The book_id  # noqa: E501

        :param book_id: The book_id of this BibleFile.  # noqa: E501
        :type: str
        """

        self._book_id = book_id

    @property
    def chapter_start(self):
        """Gets the chapter_start of this BibleFile.  # noqa: E501

        The chapter_start  # noqa: E501

        :return: The chapter_start of this BibleFile.  # noqa: E501
        :rtype: str
        """
        return self._chapter_start

    @chapter_start.setter
    def chapter_start(self, chapter_start):
        """Sets the chapter_start of this BibleFile.

        The chapter_start  # noqa: E501

        :param chapter_start: The chapter_start of this BibleFile.  # noqa: E501
        :type: str
        """

        self._chapter_start = chapter_start

    @property
    def verse_sequence(self):
        """Gets the verse_sequence of this BibleFile.  # noqa: E501

        The starting verse for the bible file but with format = integer  # noqa: E501

        :return: The verse_sequence of this BibleFile.  # noqa: E501
        :rtype: int
        """
        return self._verse_sequence

    @verse_sequence.setter
    def verse_sequence(self, verse_sequence):
        """Sets the verse_sequence of this BibleFile.

        The starting verse for the bible file but with format = integer  # noqa: E501

        :param verse_sequence: The verse_sequence of this BibleFile.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                verse_sequence is not None and verse_sequence < 1):  # noqa: E501
            raise ValueError("Invalid value for `verse_sequence`, must be a value greater than or equal to `1`")  # noqa: E501

        self._verse_sequence = verse_sequence

    @property
    def chapter_end(self):
        """Gets the chapter_end of this BibleFile.  # noqa: E501

        If the Bible File spans multiple chapters this field indicates the last chapter of the selection  # noqa: E501

        :return: The chapter_end of this BibleFile.  # noqa: E501
        :rtype: str
        """
        return self._chapter_end

    @chapter_end.setter
    def chapter_end(self, chapter_end):
        """Sets the chapter_end of this BibleFile.

        If the Bible File spans multiple chapters this field indicates the last chapter of the selection  # noqa: E501

        :param chapter_end: The chapter_end of this BibleFile.  # noqa: E501
        :type: str
        """

        self._chapter_end = chapter_end

    @property
    def verse_start(self):
        """Gets the verse_start of this BibleFile.  # noqa: E501

        The starting verse at which the BibleFile reference begins  # noqa: E501

        :return: The verse_start of this BibleFile.  # noqa: E501
        :rtype: str
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this BibleFile.

        The starting verse at which the BibleFile reference begins  # noqa: E501

        :param verse_start: The verse_start of this BibleFile.  # noqa: E501
        :type: str
        """

        self._verse_start = verse_start

    @property
    def verse_end(self):
        """Gets the verse_end of this BibleFile.  # noqa: E501

        If the Bible File spans multiple verses this value will indicate the last verse in that reference. This value is inclusive, so for the reference John 1:1-4. The value would be 4 and the reference would contain verse 4.  # noqa: E501

        :return: The verse_end of this BibleFile.  # noqa: E501
        :rtype: str
        """
        return self._verse_end

    @verse_end.setter
    def verse_end(self, verse_end):
        """Sets the verse_end of this BibleFile.

        If the Bible File spans multiple verses this value will indicate the last verse in that reference. This value is inclusive, so for the reference John 1:1-4. The value would be 4 and the reference would contain verse 4.  # noqa: E501

        :param verse_end: The verse_end of this BibleFile.  # noqa: E501
        :type: str
        """

        self._verse_end = verse_end

    @property
    def verse_text(self):
        """Gets the verse_text of this BibleFile.  # noqa: E501

        If the BibleFile model returns text instead of a file_name this field will contain it.  # noqa: E501

        :return: The verse_text of this BibleFile.  # noqa: E501
        :rtype: str
        """
        return self._verse_text

    @verse_text.setter
    def verse_text(self, verse_text):
        """Sets the verse_text of this BibleFile.

        If the BibleFile model returns text instead of a file_name this field will contain it.  # noqa: E501

        :param verse_text: The verse_text of this BibleFile.  # noqa: E501
        :type: str
        """

        self._verse_text = verse_text

    @property
    def file_name(self):
        """Gets the file_name of this BibleFile.  # noqa: E501

        The file_name  # noqa: E501

        :return: The file_name of this BibleFile.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this BibleFile.

        The file_name  # noqa: E501

        :param file_name: The file_name of this BibleFile.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                file_name is not None and len(file_name) > 191):
            raise ValueError("Invalid value for `file_name`, length must be less than or equal to `191`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this BibleFile.  # noqa: E501

        The file size  # noqa: E501

        :return: The file_size of this BibleFile.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this BibleFile.

        The file size  # noqa: E501

        :param file_size: The file_size of this BibleFile.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def duration(self):
        """Gets the duration of this BibleFile.  # noqa: E501

        If the file has a set length of time, this field indicates that time in milliseconds  # noqa: E501

        :return: The duration of this BibleFile.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this BibleFile.

        If the file has a set length of time, this field indicates that time in milliseconds  # noqa: E501

        :param duration: The duration of this BibleFile.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                duration is not None and duration < 0):  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleFile):
            return True

        return self.to_dict() != other.to_dict()
