# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Book(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'id_usfx': 'str',
        'id_osis': 'str',
        'protestant_order': 'int',
        'testament_order': 'int',
        'book_testament': 'str',
        'book_group': 'str',
        'chapters': 'list[int]',
        'verses': 'int',
        'name': 'str',
        'notes': 'str',
        'description': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_usfx': 'id_usfx',
        'id_osis': 'id_osis',
        'protestant_order': 'protestant_order',
        'testament_order': 'testament_order',
        'book_testament': 'book_testament',
        'book_group': 'book_group',
        'chapters': 'chapters',
        'verses': 'verses',
        'name': 'name',
        'notes': 'notes',
        'description': 'description',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, id_usfx=None, id_osis=None, protestant_order=None, testament_order=None, book_testament=None, book_group=None, chapters=None, verses=None, name=None, notes=None, description=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Book - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._id_usfx = None
        self._id_osis = None
        self._protestant_order = None
        self._testament_order = None
        self._book_testament = None
        self._book_group = None
        self._chapters = None
        self._verses = None
        self._name = None
        self._notes = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if id_usfx is not None:
            self.id_usfx = id_usfx
        if id_osis is not None:
            self.id_osis = id_osis
        if protestant_order is not None:
            self.protestant_order = protestant_order
        if testament_order is not None:
            self.testament_order = testament_order
        if book_testament is not None:
            self.book_testament = book_testament
        if book_group is not None:
            self.book_group = book_group
        self.chapters = chapters
        self.verses = verses
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Book.  # noqa: E501

        The USFM 2.4 id for the books of the Bible  # noqa: E501

        :return: The id of this Book.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Book.

        The USFM 2.4 id for the books of the Bible  # noqa: E501

        :param id: The id of this Book.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 3):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 3):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `3`")  # noqa: E501

        self._id = id

    @property
    def id_usfx(self):
        """Gets the id_usfx of this Book.  # noqa: E501

        The usfx id for the books of the Bible  # noqa: E501

        :return: The id_usfx of this Book.  # noqa: E501
        :rtype: str
        """
        return self._id_usfx

    @id_usfx.setter
    def id_usfx(self, id_usfx):
        """Sets the id_usfx of this Book.

        The usfx id for the books of the Bible  # noqa: E501

        :param id_usfx: The id_usfx of this Book.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id_usfx is not None and len(id_usfx) > 2):
            raise ValueError("Invalid value for `id_usfx`, length must be less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id_usfx is not None and len(id_usfx) < 2):
            raise ValueError("Invalid value for `id_usfx`, length must be greater than or equal to `2`")  # noqa: E501

        self._id_usfx = id_usfx

    @property
    def id_osis(self):
        """Gets the id_osis of this Book.  # noqa: E501

        The OSIS id for the books of the Bible  # noqa: E501

        :return: The id_osis of this Book.  # noqa: E501
        :rtype: str
        """
        return self._id_osis

    @id_osis.setter
    def id_osis(self, id_osis):
        """Sets the id_osis of this Book.

        The OSIS id for the books of the Bible  # noqa: E501

        :param id_osis: The id_osis of this Book.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id_osis is not None and len(id_osis) > 12):
            raise ValueError("Invalid value for `id_osis`, length must be less than or equal to `12`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id_osis is not None and len(id_osis) < 2):
            raise ValueError("Invalid value for `id_osis`, length must be greater than or equal to `2`")  # noqa: E501

        self._id_osis = id_osis

    @property
    def protestant_order(self):
        """Gets the protestant_order of this Book.  # noqa: E501

        The standard book order for the `protestant_order` in ascending order from Genesis onwards  # noqa: E501

        :return: The protestant_order of this Book.  # noqa: E501
        :rtype: int
        """
        return self._protestant_order

    @protestant_order.setter
    def protestant_order(self, protestant_order):
        """Sets the protestant_order of this Book.

        The standard book order for the `protestant_order` in ascending order from Genesis onwards  # noqa: E501

        :param protestant_order: The protestant_order of this Book.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                protestant_order is not None and protestant_order < 0):  # noqa: E501
            raise ValueError("Invalid value for `protestant_order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._protestant_order = protestant_order

    @property
    def testament_order(self):
        """Gets the testament_order of this Book.  # noqa: E501

        The standard book order within a testament in ascending order from Genesis to Malachi, and Matthew to Revelations  # noqa: E501

        :return: The testament_order of this Book.  # noqa: E501
        :rtype: int
        """
        return self._testament_order

    @testament_order.setter
    def testament_order(self, testament_order):
        """Sets the testament_order of this Book.

        The standard book order within a testament in ascending order from Genesis to Malachi, and Matthew to Revelations  # noqa: E501

        :param testament_order: The testament_order of this Book.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                testament_order is not None and testament_order < 0):  # noqa: E501
            raise ValueError("Invalid value for `testament_order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._testament_order = testament_order

    @property
    def book_testament(self):
        """Gets the book_testament of this Book.  # noqa: E501

        A short code identifying the testament containing the book  # noqa: E501

        :return: The book_testament of this Book.  # noqa: E501
        :rtype: str
        """
        return self._book_testament

    @book_testament.setter
    def book_testament(self, book_testament):
        """Sets the book_testament of this Book.

        A short code identifying the testament containing the book  # noqa: E501

        :param book_testament: The book_testament of this Book.  # noqa: E501
        :type: str
        """
        allowed_values = ["OT", "NT", "AP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and book_testament not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `book_testament` ({0}), must be one of {1}"  # noqa: E501
                .format(book_testament, allowed_values)
            )

        self._book_testament = book_testament

    @property
    def book_group(self):
        """Gets the book_group of this Book.  # noqa: E501

        An english name for the section of books that current book can be categorized in  # noqa: E501

        :return: The book_group of this Book.  # noqa: E501
        :rtype: str
        """
        return self._book_group

    @book_group.setter
    def book_group(self, book_group):
        """Sets the book_group of this Book.

        An english name for the section of books that current book can be categorized in  # noqa: E501

        :param book_group: The book_group of this Book.  # noqa: E501
        :type: str
        """
        allowed_values = ["Historical Books", "Pauline Epistles", "General Epistles", "Apostolic History", "Minor Prophets", "Major Prophets", "The Law", "Wisdom Books", "Gospels", "Apocalypse"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and book_group not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `book_group` ({0}), must be one of {1}"  # noqa: E501
                .format(book_group, allowed_values)
            )

        self._book_group = book_group

    @property
    def chapters(self):
        """Gets the chapters of this Book.  # noqa: E501

        The book's number of chapters  # noqa: E501

        :return: The chapters of this Book.  # noqa: E501
        :rtype: list[int]
        """
        return self._chapters

    @chapters.setter
    def chapters(self, chapters):
        """Sets the chapters of this Book.

        The book's number of chapters  # noqa: E501

        :param chapters: The chapters of this Book.  # noqa: E501
        :type: list[int]
        """

        self._chapters = chapters

    @property
    def verses(self):
        """Gets the verses of this Book.  # noqa: E501

        The book's number of verses  # noqa: E501

        :return: The verses of this Book.  # noqa: E501
        :rtype: int
        """
        return self._verses

    @verses.setter
    def verses(self, verses):
        """Sets the verses of this Book.

        The book's number of verses  # noqa: E501

        :param verses: The verses of this Book.  # noqa: E501
        :type: int
        """

        self._verses = verses

    @property
    def name(self):
        """Gets the name of this Book.  # noqa: E501

        The English name of the book  # noqa: E501

        :return: The name of this Book.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Book.

        The English name of the book  # noqa: E501

        :param name: The name of this Book.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Book.  # noqa: E501

        Any archivist notes about the book  # noqa: E501

        :return: The notes of this Book.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Book.

        Any archivist notes about the book  # noqa: E501

        :param notes: The notes of this Book.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def description(self):
        """Gets the description of this Book.  # noqa: E501

        The book's description  # noqa: E501

        :return: The description of this Book.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Book.

        The book's description  # noqa: E501

        :param description: The description of this Book.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this Book.  # noqa: E501

        The timestamp for the books creation  # noqa: E501

        :return: The created_at of this Book.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Book.

        The timestamp for the books creation  # noqa: E501

        :param created_at: The created_at of this Book.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Book.  # noqa: E501

        The timestamp for the last update of the book  # noqa: E501

        :return: The updated_at of this Book.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Book.

        The timestamp for the last update of the book  # noqa: E501

        :param updated_at: The updated_at of this Book.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Book):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Book):
            return True

        return self.to_dict() != other.to_dict()
