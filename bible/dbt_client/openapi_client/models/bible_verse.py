# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleVerse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'book_id': 'Id',
        'chapter': 'ChapterStart',
        'verse_number': 'VerseStart',
        'verse_sequence': 'VerseSequence',
        'verse_text': 'str'
    }

    attribute_map = {
        'id': 'id',
        'book_id': 'book_id',
        'chapter': 'chapter',
        'verse_number': 'verse_number',
        'verse_sequence': 'verse_sequence',
        'verse_text': 'verse_text'
    }

    def __init__(self, id=None, book_id=None, chapter=None, verse_number=None, verse_sequence=None, verse_text=None, local_vars_configuration=None):  # noqa: E501
        """BibleVerse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._book_id = None
        self._chapter = None
        self._verse_number = None
        self._verse_sequence = None
        self._verse_text = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if book_id is not None:
            self.book_id = book_id
        if chapter is not None:
            self.chapter = chapter
        if verse_number is not None:
            self.verse_number = verse_number
        if verse_sequence is not None:
            self.verse_sequence = verse_sequence
        if verse_text is not None:
            self.verse_text = verse_text

    @property
    def id(self):
        """Gets the id of this BibleVerse.  # noqa: E501

        The incrementing id for the Bible Verse  # noqa: E501

        :return: The id of this BibleVerse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BibleVerse.

        The incrementing id for the Bible Verse  # noqa: E501

        :param id: The id of this BibleVerse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def book_id(self):
        """Gets the book_id of this BibleVerse.  # noqa: E501


        :return: The book_id of this BibleVerse.  # noqa: E501
        :rtype: Id
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this BibleVerse.


        :param book_id: The book_id of this BibleVerse.  # noqa: E501
        :type: Id
        """

        self._book_id = book_id

    @property
    def chapter(self):
        """Gets the chapter of this BibleVerse.  # noqa: E501


        :return: The chapter of this BibleVerse.  # noqa: E501
        :rtype: ChapterStart
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter):
        """Sets the chapter of this BibleVerse.


        :param chapter: The chapter of this BibleVerse.  # noqa: E501
        :type: ChapterStart
        """

        self._chapter = chapter

    @property
    def verse_number(self):
        """Gets the verse_number of this BibleVerse.  # noqa: E501


        :return: The verse_number of this BibleVerse.  # noqa: E501
        :rtype: VerseStart
        """
        return self._verse_number

    @verse_number.setter
    def verse_number(self, verse_number):
        """Sets the verse_number of this BibleVerse.


        :param verse_number: The verse_number of this BibleVerse.  # noqa: E501
        :type: VerseStart
        """

        self._verse_number = verse_number

    @property
    def verse_sequence(self):
        """Gets the verse_sequence of this BibleVerse.  # noqa: E501


        :return: The verse_sequence of this BibleVerse.  # noqa: E501
        :rtype: VerseSequence
        """
        return self._verse_sequence

    @verse_sequence.setter
    def verse_sequence(self, verse_sequence):
        """Sets the verse_sequence of this BibleVerse.


        :param verse_sequence: The verse_sequence of this BibleVerse.  # noqa: E501
        :type: VerseSequence
        """

        self._verse_sequence = verse_sequence

    @property
    def verse_text(self):
        """Gets the verse_text of this BibleVerse.  # noqa: E501

        The text of the Bible Verse  # noqa: E501

        :return: The verse_text of this BibleVerse.  # noqa: E501
        :rtype: str
        """
        return self._verse_text

    @verse_text.setter
    def verse_text(self, verse_text):
        """Sets the verse_text of this BibleVerse.

        The text of the Bible Verse  # noqa: E501

        :param verse_text: The verse_text of this BibleVerse.  # noqa: E501
        :type: str
        """

        self._verse_text = verse_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleVerse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleVerse):
            return True

        return self.to_dict() != other.to_dict()
