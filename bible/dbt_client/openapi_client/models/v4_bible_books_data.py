# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V4BibleBooksData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'book_id': 'Id',
        'book_id_usfx': 'IdUsfx',
        'book_id_osis': 'IdOsis',
        'name': 'Name',
        'testament': 'BookTestament',
        'testament_order': 'TestamentOrder',
        'book_order': 'ProtestantOrder',
        'book_group': 'BookGroup',
        'chapters': 'Chapters'
    }

    attribute_map = {
        'book_id': 'book_id',
        'book_id_usfx': 'book_id_usfx',
        'book_id_osis': 'book_id_osis',
        'name': 'name',
        'testament': 'testament',
        'testament_order': 'testament_order',
        'book_order': 'book_order',
        'book_group': 'book_group',
        'chapters': 'chapters'
    }

    def __init__(self, book_id=None, book_id_usfx=None, book_id_osis=None, name=None, testament=None, testament_order=None, book_order=None, book_group=None, chapters=None, local_vars_configuration=None):  # noqa: E501
        """V4BibleBooksData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._book_id = None
        self._book_id_usfx = None
        self._book_id_osis = None
        self._name = None
        self._testament = None
        self._testament_order = None
        self._book_order = None
        self._book_group = None
        self._chapters = None
        self.discriminator = None

        if book_id is not None:
            self.book_id = book_id
        if book_id_usfx is not None:
            self.book_id_usfx = book_id_usfx
        if book_id_osis is not None:
            self.book_id_osis = book_id_osis
        if name is not None:
            self.name = name
        if testament is not None:
            self.testament = testament
        if testament_order is not None:
            self.testament_order = testament_order
        if book_order is not None:
            self.book_order = book_order
        if book_group is not None:
            self.book_group = book_group
        if chapters is not None:
            self.chapters = chapters

    @property
    def book_id(self):
        """Gets the book_id of this V4BibleBooksData.  # noqa: E501


        :return: The book_id of this V4BibleBooksData.  # noqa: E501
        :rtype: Id
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this V4BibleBooksData.


        :param book_id: The book_id of this V4BibleBooksData.  # noqa: E501
        :type: Id
        """

        self._book_id = book_id

    @property
    def book_id_usfx(self):
        """Gets the book_id_usfx of this V4BibleBooksData.  # noqa: E501


        :return: The book_id_usfx of this V4BibleBooksData.  # noqa: E501
        :rtype: IdUsfx
        """
        return self._book_id_usfx

    @book_id_usfx.setter
    def book_id_usfx(self, book_id_usfx):
        """Sets the book_id_usfx of this V4BibleBooksData.


        :param book_id_usfx: The book_id_usfx of this V4BibleBooksData.  # noqa: E501
        :type: IdUsfx
        """

        self._book_id_usfx = book_id_usfx

    @property
    def book_id_osis(self):
        """Gets the book_id_osis of this V4BibleBooksData.  # noqa: E501


        :return: The book_id_osis of this V4BibleBooksData.  # noqa: E501
        :rtype: IdOsis
        """
        return self._book_id_osis

    @book_id_osis.setter
    def book_id_osis(self, book_id_osis):
        """Sets the book_id_osis of this V4BibleBooksData.


        :param book_id_osis: The book_id_osis of this V4BibleBooksData.  # noqa: E501
        :type: IdOsis
        """

        self._book_id_osis = book_id_osis

    @property
    def name(self):
        """Gets the name of this V4BibleBooksData.  # noqa: E501


        :return: The name of this V4BibleBooksData.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V4BibleBooksData.


        :param name: The name of this V4BibleBooksData.  # noqa: E501
        :type: Name
        """

        self._name = name

    @property
    def testament(self):
        """Gets the testament of this V4BibleBooksData.  # noqa: E501


        :return: The testament of this V4BibleBooksData.  # noqa: E501
        :rtype: BookTestament
        """
        return self._testament

    @testament.setter
    def testament(self, testament):
        """Sets the testament of this V4BibleBooksData.


        :param testament: The testament of this V4BibleBooksData.  # noqa: E501
        :type: BookTestament
        """

        self._testament = testament

    @property
    def testament_order(self):
        """Gets the testament_order of this V4BibleBooksData.  # noqa: E501


        :return: The testament_order of this V4BibleBooksData.  # noqa: E501
        :rtype: TestamentOrder
        """
        return self._testament_order

    @testament_order.setter
    def testament_order(self, testament_order):
        """Sets the testament_order of this V4BibleBooksData.


        :param testament_order: The testament_order of this V4BibleBooksData.  # noqa: E501
        :type: TestamentOrder
        """

        self._testament_order = testament_order

    @property
    def book_order(self):
        """Gets the book_order of this V4BibleBooksData.  # noqa: E501


        :return: The book_order of this V4BibleBooksData.  # noqa: E501
        :rtype: ProtestantOrder
        """
        return self._book_order

    @book_order.setter
    def book_order(self, book_order):
        """Sets the book_order of this V4BibleBooksData.


        :param book_order: The book_order of this V4BibleBooksData.  # noqa: E501
        :type: ProtestantOrder
        """

        self._book_order = book_order

    @property
    def book_group(self):
        """Gets the book_group of this V4BibleBooksData.  # noqa: E501


        :return: The book_group of this V4BibleBooksData.  # noqa: E501
        :rtype: BookGroup
        """
        return self._book_group

    @book_group.setter
    def book_group(self, book_group):
        """Sets the book_group of this V4BibleBooksData.


        :param book_group: The book_group of this V4BibleBooksData.  # noqa: E501
        :type: BookGroup
        """

        self._book_group = book_group

    @property
    def chapters(self):
        """Gets the chapters of this V4BibleBooksData.  # noqa: E501


        :return: The chapters of this V4BibleBooksData.  # noqa: E501
        :rtype: Chapters
        """
        return self._chapters

    @chapters.setter
    def chapters(self, chapters):
        """Sets the chapters of this V4BibleBooksData.


        :param chapters: The chapters of this V4BibleBooksData.  # noqa: E501
        :type: Chapters
        """

        self._chapters = chapters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4BibleBooksData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4BibleBooksData):
            return True

        return self.to_dict() != other.to_dict()
