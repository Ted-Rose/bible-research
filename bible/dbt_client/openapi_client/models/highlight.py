# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Highlight(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'user_id': 'str',
        'bible_id': 'Id',
        'book_id': 'Id',
        'chapter': 'ChapterStart',
        'highlighted_color': 'str',
        'verse_start': 'VerseStart',
        'verse_sequence': 'VerseSequence',
        'verse_end': 'VerseEnd',
        'reference': 'str',
        'project_id': 'Id',
        'highlight_start': 'int',
        'highlighted_words': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'bible_id': 'bible_id',
        'book_id': 'book_id',
        'chapter': 'chapter',
        'highlighted_color': 'highlighted_color',
        'verse_start': 'verse_start',
        'verse_sequence': 'verse_sequence',
        'verse_end': 'verse_end',
        'reference': 'reference',
        'project_id': 'project_id',
        'highlight_start': 'highlight_start',
        'highlighted_words': 'highlighted_words'
    }

    def __init__(self, id=None, user_id=None, bible_id=None, book_id=None, chapter=None, highlighted_color=None, verse_start=None, verse_sequence=None, verse_end=None, reference=None, project_id=None, highlight_start=None, highlighted_words=None, local_vars_configuration=None):  # noqa: E501
        """Highlight - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._bible_id = None
        self._book_id = None
        self._chapter = None
        self._highlighted_color = None
        self._verse_start = None
        self._verse_sequence = None
        self._verse_end = None
        self._reference = None
        self._project_id = None
        self._highlight_start = None
        self._highlighted_words = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if bible_id is not None:
            self.bible_id = bible_id
        if book_id is not None:
            self.book_id = book_id
        if chapter is not None:
            self.chapter = chapter
        if highlighted_color is not None:
            self.highlighted_color = highlighted_color
        if verse_start is not None:
            self.verse_start = verse_start
        if verse_sequence is not None:
            self.verse_sequence = verse_sequence
        if verse_end is not None:
            self.verse_end = verse_end
        if reference is not None:
            self.reference = reference
        if project_id is not None:
            self.project_id = project_id
        if highlight_start is not None:
            self.highlight_start = highlight_start
        if highlighted_words is not None:
            self.highlighted_words = highlighted_words

    @property
    def id(self):
        """Gets the id of this Highlight.  # noqa: E501

        The highlight id  # noqa: E501

        :return: The id of this Highlight.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Highlight.

        The highlight id  # noqa: E501

        :param id: The id of this Highlight.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Highlight.  # noqa: E501

        The user that created the highlight  # noqa: E501

        :return: The user_id of this Highlight.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Highlight.

        The user that created the highlight  # noqa: E501

        :param user_id: The user_id of this Highlight.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def bible_id(self):
        """Gets the bible_id of this Highlight.  # noqa: E501


        :return: The bible_id of this Highlight.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this Highlight.


        :param bible_id: The bible_id of this Highlight.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def book_id(self):
        """Gets the book_id of this Highlight.  # noqa: E501


        :return: The book_id of this Highlight.  # noqa: E501
        :rtype: Id
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this Highlight.


        :param book_id: The book_id of this Highlight.  # noqa: E501
        :type: Id
        """

        self._book_id = book_id

    @property
    def chapter(self):
        """Gets the chapter of this Highlight.  # noqa: E501


        :return: The chapter of this Highlight.  # noqa: E501
        :rtype: ChapterStart
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter):
        """Sets the chapter of this Highlight.


        :param chapter: The chapter of this Highlight.  # noqa: E501
        :type: ChapterStart
        """

        self._chapter = chapter

    @property
    def highlighted_color(self):
        """Gets the highlighted_color of this Highlight.  # noqa: E501

        The highlight's highlighted color in either hex, rgb, or rgba notation.  # noqa: E501

        :return: The highlighted_color of this Highlight.  # noqa: E501
        :rtype: str
        """
        return self._highlighted_color

    @highlighted_color.setter
    def highlighted_color(self, highlighted_color):
        """Sets the highlighted_color of this Highlight.

        The highlight's highlighted color in either hex, rgb, or rgba notation.  # noqa: E501

        :param highlighted_color: The highlighted_color of this Highlight.  # noqa: E501
        :type: str
        """

        self._highlighted_color = highlighted_color

    @property
    def verse_start(self):
        """Gets the verse_start of this Highlight.  # noqa: E501


        :return: The verse_start of this Highlight.  # noqa: E501
        :rtype: VerseStart
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this Highlight.


        :param verse_start: The verse_start of this Highlight.  # noqa: E501
        :type: VerseStart
        """

        self._verse_start = verse_start

    @property
    def verse_sequence(self):
        """Gets the verse_sequence of this Highlight.  # noqa: E501


        :return: The verse_sequence of this Highlight.  # noqa: E501
        :rtype: VerseSequence
        """
        return self._verse_sequence

    @verse_sequence.setter
    def verse_sequence(self, verse_sequence):
        """Sets the verse_sequence of this Highlight.


        :param verse_sequence: The verse_sequence of this Highlight.  # noqa: E501
        :type: VerseSequence
        """

        self._verse_sequence = verse_sequence

    @property
    def verse_end(self):
        """Gets the verse_end of this Highlight.  # noqa: E501


        :return: The verse_end of this Highlight.  # noqa: E501
        :rtype: VerseEnd
        """
        return self._verse_end

    @verse_end.setter
    def verse_end(self, verse_end):
        """Sets the verse_end of this Highlight.


        :param verse_end: The verse_end of this Highlight.  # noqa: E501
        :type: VerseEnd
        """

        self._verse_end = verse_end

    @property
    def reference(self):
        """Gets the reference of this Highlight.  # noqa: E501


        :return: The reference of this Highlight.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Highlight.


        :param reference: The reference of this Highlight.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def project_id(self):
        """Gets the project_id of this Highlight.  # noqa: E501


        :return: The project_id of this Highlight.  # noqa: E501
        :rtype: Id
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Highlight.


        :param project_id: The project_id of this Highlight.  # noqa: E501
        :type: Id
        """

        self._project_id = project_id

    @property
    def highlight_start(self):
        """Gets the highlight_start of this Highlight.  # noqa: E501

        The number of words from the beginning of the verse to start the highlight at. For example, if the verse Genesis 1:1 had a `highlight_start` of 4 and a highlighted_words equal to 2. The result would be: In the beginning `[God created]` the heavens and the earth.  # noqa: E501

        :return: The highlight_start of this Highlight.  # noqa: E501
        :rtype: int
        """
        return self._highlight_start

    @highlight_start.setter
    def highlight_start(self, highlight_start):
        """Sets the highlight_start of this Highlight.

        The number of words from the beginning of the verse to start the highlight at. For example, if the verse Genesis 1:1 had a `highlight_start` of 4 and a highlighted_words equal to 2. The result would be: In the beginning `[God created]` the heavens and the earth.  # noqa: E501

        :param highlight_start: The highlight_start of this Highlight.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                highlight_start is not None and highlight_start < 0):  # noqa: E501
            raise ValueError("Invalid value for `highlight_start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._highlight_start = highlight_start

    @property
    def highlighted_words(self):
        """Gets the highlighted_words of this Highlight.  # noqa: E501

        The number of words being highlighted. For example, if the verse Genesis 1:1 had a `highlight_start` of 4 and a highlighted_words equal to 2. The result would be: In the beginning `[God created]` the heavens and the earth.  # noqa: E501

        :return: The highlighted_words of this Highlight.  # noqa: E501
        :rtype: int
        """
        return self._highlighted_words

    @highlighted_words.setter
    def highlighted_words(self, highlighted_words):
        """Sets the highlighted_words of this Highlight.

        The number of words being highlighted. For example, if the verse Genesis 1:1 had a `highlight_start` of 4 and a highlighted_words equal to 2. The result would be: In the beginning `[God created]` the heavens and the earth.  # noqa: E501

        :param highlighted_words: The highlighted_words of this Highlight.  # noqa: E501
        :type: int
        """

        self._highlighted_words = highlighted_words

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Highlight):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Highlight):
            return True

        return self.to_dict() != other.to_dict()
