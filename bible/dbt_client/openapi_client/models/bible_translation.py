# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleTranslation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'iso': 'Id',
        'bible_id': 'Id',
        'vernacular': 'str',
        'vernacular_trade': 'str',
        'name': 'str',
        'type': 'str',
        'features': 'str',
        'description': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'id': 'id',
        'iso': 'iso',
        'bible_id': 'bible_id',
        'vernacular': 'vernacular',
        'vernacular_trade': 'vernacular_trade',
        'name': 'name',
        'type': 'type',
        'features': 'features',
        'description': 'description',
        'notes': 'notes'
    }

    def __init__(self, id=None, iso=None, bible_id=None, vernacular=None, vernacular_trade=None, name=None, type=None, features=None, description=None, notes=None, local_vars_configuration=None):  # noqa: E501
        """BibleTranslation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._iso = None
        self._bible_id = None
        self._vernacular = None
        self._vernacular_trade = None
        self._name = None
        self._type = None
        self._features = None
        self._description = None
        self._notes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if iso is not None:
            self.iso = iso
        if bible_id is not None:
            self.bible_id = bible_id
        if vernacular is not None:
            self.vernacular = vernacular
        if vernacular_trade is not None:
            self.vernacular_trade = vernacular_trade
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if features is not None:
            self.features = features
        if description is not None:
            self.description = description
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this BibleTranslation.  # noqa: E501


        :return: The id of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BibleTranslation.


        :param id: The id of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def iso(self):
        """Gets the iso of this BibleTranslation.  # noqa: E501


        :return: The iso of this BibleTranslation.  # noqa: E501
        :rtype: Id
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this BibleTranslation.


        :param iso: The iso of this BibleTranslation.  # noqa: E501
        :type: Id
        """

        self._iso = iso

    @property
    def bible_id(self):
        """Gets the bible_id of this BibleTranslation.  # noqa: E501


        :return: The bible_id of this BibleTranslation.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this BibleTranslation.


        :param bible_id: The bible_id of this BibleTranslation.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def vernacular(self):
        """Gets the vernacular of this BibleTranslation.  # noqa: E501


        :return: The vernacular of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._vernacular

    @vernacular.setter
    def vernacular(self, vernacular):
        """Sets the vernacular of this BibleTranslation.


        :param vernacular: The vernacular of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._vernacular = vernacular

    @property
    def vernacular_trade(self):
        """Gets the vernacular_trade of this BibleTranslation.  # noqa: E501


        :return: The vernacular_trade of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._vernacular_trade

    @vernacular_trade.setter
    def vernacular_trade(self, vernacular_trade):
        """Sets the vernacular_trade of this BibleTranslation.


        :param vernacular_trade: The vernacular_trade of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._vernacular_trade = vernacular_trade

    @property
    def name(self):
        """Gets the name of this BibleTranslation.  # noqa: E501


        :return: The name of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BibleTranslation.


        :param name: The name of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this BibleTranslation.  # noqa: E501


        :return: The type of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BibleTranslation.


        :param type: The type of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def features(self):
        """Gets the features of this BibleTranslation.  # noqa: E501


        :return: The features of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this BibleTranslation.


        :param features: The features of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._features = features

    @property
    def description(self):
        """Gets the description of this BibleTranslation.  # noqa: E501

        Details on the translation  # noqa: E501

        :return: The description of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BibleTranslation.

        Details on the translation  # noqa: E501

        :param description: The description of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def notes(self):
        """Gets the notes of this BibleTranslation.  # noqa: E501


        :return: The notes of this BibleTranslation.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this BibleTranslation.


        :param notes: The notes of this BibleTranslation.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleTranslation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleTranslation):
            return True

        return self.to_dict() != other.to_dict()
