# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Metadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bible_id': 'Id',
        'bible_name': 'Name',
        'bible_vname': 'Name',
        'book_name': 'Name'
    }

    attribute_map = {
        'bible_id': 'bible_id',
        'bible_name': 'bible_name',
        'bible_vname': 'bible_vname',
        'book_name': 'book_name'
    }

    def __init__(self, bible_id=None, bible_name=None, bible_vname=None, book_name=None, local_vars_configuration=None):  # noqa: E501
        """Metadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bible_id = None
        self._bible_name = None
        self._bible_vname = None
        self._book_name = None
        self.discriminator = None

        if bible_id is not None:
            self.bible_id = bible_id
        if bible_name is not None:
            self.bible_name = bible_name
        if bible_vname is not None:
            self.bible_vname = bible_vname
        if book_name is not None:
            self.book_name = book_name

    @property
    def bible_id(self):
        """Gets the bible_id of this Metadata.  # noqa: E501


        :return: The bible_id of this Metadata.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this Metadata.


        :param bible_id: The bible_id of this Metadata.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def bible_name(self):
        """Gets the bible_name of this Metadata.  # noqa: E501


        :return: The bible_name of this Metadata.  # noqa: E501
        :rtype: Name
        """
        return self._bible_name

    @bible_name.setter
    def bible_name(self, bible_name):
        """Sets the bible_name of this Metadata.


        :param bible_name: The bible_name of this Metadata.  # noqa: E501
        :type: Name
        """

        self._bible_name = bible_name

    @property
    def bible_vname(self):
        """Gets the bible_vname of this Metadata.  # noqa: E501


        :return: The bible_vname of this Metadata.  # noqa: E501
        :rtype: Name
        """
        return self._bible_vname

    @bible_vname.setter
    def bible_vname(self, bible_vname):
        """Sets the bible_vname of this Metadata.


        :param bible_vname: The bible_vname of this Metadata.  # noqa: E501
        :type: Name
        """

        self._bible_vname = bible_vname

    @property
    def book_name(self):
        """Gets the book_name of this Metadata.  # noqa: E501


        :return: The book_name of this Metadata.  # noqa: E501
        :rtype: Name
        """
        return self._book_name

    @book_name.setter
    def book_name(self, book_name):
        """Sets the book_name of this Metadata.


        :param book_name: The book_name of this Metadata.  # noqa: E501
        :type: Name
        """

        self._book_name = book_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Metadata):
            return True

        return self.to_dict() != other.to_dict()
