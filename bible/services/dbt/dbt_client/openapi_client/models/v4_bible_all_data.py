# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V4BibleAllData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abbr': 'Id',
        'name': 'Name',
        'vname': 'Name',
        'language': 'Name',
        'language_autonym': 'Name',
        'language_alt_names': 'Name',
        'iso': 'Iso',
        'date': 'date',
        'filesets': 'V4BibleAllFilesets'
    }

    attribute_map = {
        'abbr': 'abbr',
        'name': 'name',
        'vname': 'vname',
        'language': 'language',
        'language_autonym': 'language_autonym',
        'language_alt_names': 'language_altNames',
        'iso': 'iso',
        'date': 'date',
        'filesets': 'filesets'
    }

    def __init__(self, abbr=None, name=None, vname=None, language=None, language_autonym=None, language_alt_names=None, iso=None, date=None, filesets=None, local_vars_configuration=None):  # noqa: E501
        """V4BibleAllData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._abbr = None
        self._name = None
        self._vname = None
        self._language = None
        self._language_autonym = None
        self._language_alt_names = None
        self._iso = None
        self._date = None
        self._filesets = None
        self.discriminator = None

        if abbr is not None:
            self.abbr = abbr
        if name is not None:
            self.name = name
        if vname is not None:
            self.vname = vname
        if language is not None:
            self.language = language
        if language_autonym is not None:
            self.language_autonym = language_autonym
        if language_alt_names is not None:
            self.language_alt_names = language_alt_names
        if iso is not None:
            self.iso = iso
        if date is not None:
            self.date = date
        if filesets is not None:
            self.filesets = filesets

    @property
    def abbr(self):
        """Gets the abbr of this V4BibleAllData.  # noqa: E501


        :return: The abbr of this V4BibleAllData.  # noqa: E501
        :rtype: Id
        """
        return self._abbr

    @abbr.setter
    def abbr(self, abbr):
        """Sets the abbr of this V4BibleAllData.


        :param abbr: The abbr of this V4BibleAllData.  # noqa: E501
        :type: Id
        """

        self._abbr = abbr

    @property
    def name(self):
        """Gets the name of this V4BibleAllData.  # noqa: E501


        :return: The name of this V4BibleAllData.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V4BibleAllData.


        :param name: The name of this V4BibleAllData.  # noqa: E501
        :type: Name
        """

        self._name = name

    @property
    def vname(self):
        """Gets the vname of this V4BibleAllData.  # noqa: E501


        :return: The vname of this V4BibleAllData.  # noqa: E501
        :rtype: Name
        """
        return self._vname

    @vname.setter
    def vname(self, vname):
        """Sets the vname of this V4BibleAllData.


        :param vname: The vname of this V4BibleAllData.  # noqa: E501
        :type: Name
        """

        self._vname = vname

    @property
    def language(self):
        """Gets the language of this V4BibleAllData.  # noqa: E501


        :return: The language of this V4BibleAllData.  # noqa: E501
        :rtype: Name
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this V4BibleAllData.


        :param language: The language of this V4BibleAllData.  # noqa: E501
        :type: Name
        """

        self._language = language

    @property
    def language_autonym(self):
        """Gets the language_autonym of this V4BibleAllData.  # noqa: E501


        :return: The language_autonym of this V4BibleAllData.  # noqa: E501
        :rtype: Name
        """
        return self._language_autonym

    @language_autonym.setter
    def language_autonym(self, language_autonym):
        """Sets the language_autonym of this V4BibleAllData.


        :param language_autonym: The language_autonym of this V4BibleAllData.  # noqa: E501
        :type: Name
        """

        self._language_autonym = language_autonym

    @property
    def language_alt_names(self):
        """Gets the language_alt_names of this V4BibleAllData.  # noqa: E501


        :return: The language_alt_names of this V4BibleAllData.  # noqa: E501
        :rtype: Name
        """
        return self._language_alt_names

    @language_alt_names.setter
    def language_alt_names(self, language_alt_names):
        """Sets the language_alt_names of this V4BibleAllData.


        :param language_alt_names: The language_alt_names of this V4BibleAllData.  # noqa: E501
        :type: Name
        """

        self._language_alt_names = language_alt_names

    @property
    def iso(self):
        """Gets the iso of this V4BibleAllData.  # noqa: E501


        :return: The iso of this V4BibleAllData.  # noqa: E501
        :rtype: Iso
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this V4BibleAllData.


        :param iso: The iso of this V4BibleAllData.  # noqa: E501
        :type: Iso
        """

        self._iso = iso

    @property
    def date(self):
        """Gets the date of this V4BibleAllData.  # noqa: E501


        :return: The date of this V4BibleAllData.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this V4BibleAllData.


        :param date: The date of this V4BibleAllData.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def filesets(self):
        """Gets the filesets of this V4BibleAllData.  # noqa: E501


        :return: The filesets of this V4BibleAllData.  # noqa: E501
        :rtype: V4BibleAllFilesets
        """
        return self._filesets

    @filesets.setter
    def filesets(self, filesets):
        """Sets the filesets of this V4BibleAllData.


        :param filesets: The filesets of this V4BibleAllData.  # noqa: E501
        :type: V4BibleAllFilesets
        """

        self._filesets = filesets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4BibleAllData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4BibleAllData):
            return True

        return self.to_dict() != other.to_dict()
