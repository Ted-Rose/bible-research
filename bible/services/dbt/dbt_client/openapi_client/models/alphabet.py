# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Alphabet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'script': 'str',
        'name': 'str',
        'unicode_pdf': 'str',
        'family': 'str',
        'type': 'str',
        'white_space': 'str',
        'open_type_tag': 'str',
        'complex_positioning': 'str',
        'requires_font': 'bool',
        'unicode': 'bool',
        'diacritics': 'bool',
        'contextual_forms': 'bool',
        'reordering': 'bool',
        'case': 'bool',
        'split_graphs': 'bool',
        'status': 'str',
        'baseline': 'str',
        'ligatures': 'str',
        'direction': 'str',
        'sample': 'str',
        'sample_img': 'str'
    }

    attribute_map = {
        'script': 'script',
        'name': 'name',
        'unicode_pdf': 'unicode_pdf',
        'family': 'family',
        'type': 'type',
        'white_space': 'white_space',
        'open_type_tag': 'open_type_tag',
        'complex_positioning': 'complex_positioning',
        'requires_font': 'requires_font',
        'unicode': 'unicode',
        'diacritics': 'diacritics',
        'contextual_forms': 'contextual_forms',
        'reordering': 'reordering',
        'case': 'case',
        'split_graphs': 'split_graphs',
        'status': 'status',
        'baseline': 'baseline',
        'ligatures': 'ligatures',
        'direction': 'direction',
        'sample': 'sample',
        'sample_img': 'sample_img'
    }

    def __init__(self, script=None, name=None, unicode_pdf=None, family=None, type=None, white_space=None, open_type_tag=None, complex_positioning=None, requires_font=None, unicode=None, diacritics=None, contextual_forms=None, reordering=None, case=None, split_graphs=None, status=None, baseline=None, ligatures=None, direction=None, sample=None, sample_img=None, local_vars_configuration=None):  # noqa: E501
        """Alphabet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._script = None
        self._name = None
        self._unicode_pdf = None
        self._family = None
        self._type = None
        self._white_space = None
        self._open_type_tag = None
        self._complex_positioning = None
        self._requires_font = None
        self._unicode = None
        self._diacritics = None
        self._contextual_forms = None
        self._reordering = None
        self._case = None
        self._split_graphs = None
        self._status = None
        self._baseline = None
        self._ligatures = None
        self._direction = None
        self._sample = None
        self._sample_img = None
        self.discriminator = None

        if script is not None:
            self.script = script
        if name is not None:
            self.name = name
        self.unicode_pdf = unicode_pdf
        self.family = family
        self.type = type
        if white_space is not None:
            self.white_space = white_space
        if open_type_tag is not None:
            self.open_type_tag = open_type_tag
        if complex_positioning is not None:
            self.complex_positioning = complex_positioning
        if requires_font is not None:
            self.requires_font = requires_font
        if unicode is not None:
            self.unicode = unicode
        if diacritics is not None:
            self.diacritics = diacritics
        if contextual_forms is not None:
            self.contextual_forms = contextual_forms
        self.reordering = reordering
        self.case = case
        if split_graphs is not None:
            self.split_graphs = split_graphs
        if status is not None:
            self.status = status
        if baseline is not None:
            self.baseline = baseline
        if ligatures is not None:
            self.ligatures = ligatures
        self.direction = direction
        if sample is not None:
            self.sample = sample
        if sample_img is not None:
            self.sample_img = sample_img

    @property
    def script(self):
        """Gets the script of this Alphabet.  # noqa: E501

        The Script ID for the alphabet aligning with the iso 15924 standard  # noqa: E501

        :return: The script of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this Alphabet.

        The Script ID for the alphabet aligning with the iso 15924 standard  # noqa: E501

        :param script: The script of this Alphabet.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                script is not None and len(script) > 4):
            raise ValueError("Invalid value for `script`, length must be less than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                script is not None and len(script) < 4):
            raise ValueError("Invalid value for `script`, length must be greater than or equal to `4`")  # noqa: E501

        self._script = script

    @property
    def name(self):
        """Gets the name of this Alphabet.  # noqa: E501

        The name of the alphabet in English  # noqa: E501

        :return: The name of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Alphabet.

        The name of the alphabet in English  # noqa: E501

        :param name: The name of this Alphabet.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 191):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `191`")  # noqa: E501

        self._name = name

    @property
    def unicode_pdf(self):
        """Gets the unicode_pdf of this Alphabet.  # noqa: E501

        A url to a reference PDF for the alphabet  # noqa: E501

        :return: The unicode_pdf of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._unicode_pdf

    @unicode_pdf.setter
    def unicode_pdf(self, unicode_pdf):
        """Sets the unicode_pdf of this Alphabet.

        A url to a reference PDF for the alphabet  # noqa: E501

        :param unicode_pdf: The unicode_pdf of this Alphabet.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                unicode_pdf is not None and len(unicode_pdf) > 191):
            raise ValueError("Invalid value for `unicode_pdf`, length must be less than or equal to `191`")  # noqa: E501

        self._unicode_pdf = unicode_pdf

    @property
    def family(self):
        """Gets the family of this Alphabet.  # noqa: E501

        The linguistic family the alphabet can be categorized within  # noqa: E501

        :return: The family of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Alphabet.

        The linguistic family the alphabet can be categorized within  # noqa: E501

        :param family: The family of this Alphabet.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def type(self):
        """Gets the type of this Alphabet.  # noqa: E501

        The type of alphabet be described  # noqa: E501

        :return: The type of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Alphabet.

        The type of alphabet be described  # noqa: E501

        :param type: The type of this Alphabet.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def white_space(self):
        """Gets the white_space of this Alphabet.  # noqa: E501

        The usage white space within the alphabet  # noqa: E501

        :return: The white_space of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._white_space

    @white_space.setter
    def white_space(self, white_space):
        """Sets the white_space of this Alphabet.

        The usage white space within the alphabet  # noqa: E501

        :param white_space: The white_space of this Alphabet.  # noqa: E501
        :type: str
        """

        self._white_space = white_space

    @property
    def open_type_tag(self):
        """Gets the open_type_tag of this Alphabet.  # noqa: E501

        The open type tag of the alphabet  # noqa: E501

        :return: The open_type_tag of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._open_type_tag

    @open_type_tag.setter
    def open_type_tag(self, open_type_tag):
        """Sets the open_type_tag of this Alphabet.

        The open type tag of the alphabet  # noqa: E501

        :param open_type_tag: The open_type_tag of this Alphabet.  # noqa: E501
        :type: str
        """

        self._open_type_tag = open_type_tag

    @property
    def complex_positioning(self):
        """Gets the complex_positioning of this Alphabet.  # noqa: E501

        The open type tag of the alphabet  # noqa: E501

        :return: The complex_positioning of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._complex_positioning

    @complex_positioning.setter
    def complex_positioning(self, complex_positioning):
        """Sets the complex_positioning of this Alphabet.

        The open type tag of the alphabet  # noqa: E501

        :param complex_positioning: The complex_positioning of this Alphabet.  # noqa: E501
        :type: str
        """

        self._complex_positioning = complex_positioning

    @property
    def requires_font(self):
        """Gets the requires_font of this Alphabet.  # noqa: E501

        If the Alphabet generally requires the use of a font to display correctly online  # noqa: E501

        :return: The requires_font of this Alphabet.  # noqa: E501
        :rtype: bool
        """
        return self._requires_font

    @requires_font.setter
    def requires_font(self, requires_font):
        """Sets the requires_font of this Alphabet.

        If the Alphabet generally requires the use of a font to display correctly online  # noqa: E501

        :param requires_font: The requires_font of this Alphabet.  # noqa: E501
        :type: bool
        """

        self._requires_font = requires_font

    @property
    def unicode(self):
        """Gets the unicode of this Alphabet.  # noqa: E501

        If the Alphabet is fully supported by the unicode spec  # noqa: E501

        :return: The unicode of this Alphabet.  # noqa: E501
        :rtype: bool
        """
        return self._unicode

    @unicode.setter
    def unicode(self, unicode):
        """Sets the unicode of this Alphabet.

        If the Alphabet is fully supported by the unicode spec  # noqa: E501

        :param unicode: The unicode of this Alphabet.  # noqa: E501
        :type: bool
        """

        self._unicode = unicode

    @property
    def diacritics(self):
        """Gets the diacritics of this Alphabet.  # noqa: E501

        If the Alphabet contains diacritics  # noqa: E501

        :return: The diacritics of this Alphabet.  # noqa: E501
        :rtype: bool
        """
        return self._diacritics

    @diacritics.setter
    def diacritics(self, diacritics):
        """Sets the diacritics of this Alphabet.

        If the Alphabet contains diacritics  # noqa: E501

        :param diacritics: The diacritics of this Alphabet.  # noqa: E501
        :type: bool
        """

        self._diacritics = diacritics

    @property
    def contextual_forms(self):
        """Gets the contextual_forms of this Alphabet.  # noqa: E501

        If the Alphabet contains contextual forms  # noqa: E501

        :return: The contextual_forms of this Alphabet.  # noqa: E501
        :rtype: bool
        """
        return self._contextual_forms

    @contextual_forms.setter
    def contextual_forms(self, contextual_forms):
        """Sets the contextual_forms of this Alphabet.

        If the Alphabet contains contextual forms  # noqa: E501

        :param contextual_forms: The contextual_forms of this Alphabet.  # noqa: E501
        :type: bool
        """

        self._contextual_forms = contextual_forms

    @property
    def reordering(self):
        """Gets the reordering of this Alphabet.  # noqa: E501

        If the Alphabet contains reordering  # noqa: E501

        :return: The reordering of this Alphabet.  # noqa: E501
        :rtype: bool
        """
        return self._reordering

    @reordering.setter
    def reordering(self, reordering):
        """Sets the reordering of this Alphabet.

        If the Alphabet contains reordering  # noqa: E501

        :param reordering: The reordering of this Alphabet.  # noqa: E501
        :type: bool
        """

        self._reordering = reordering

    @property
    def case(self):
        """Gets the case of this Alphabet.  # noqa: E501

        If the Alphabet utilizes different cases  # noqa: E501

        :return: The case of this Alphabet.  # noqa: E501
        :rtype: bool
        """
        return self._case

    @case.setter
    def case(self, case):
        """Sets the case of this Alphabet.

        If the Alphabet utilizes different cases  # noqa: E501

        :param case: The case of this Alphabet.  # noqa: E501
        :type: bool
        """

        self._case = case

    @property
    def split_graphs(self):
        """Gets the split_graphs of this Alphabet.  # noqa: E501

        If the Alphabet contains letters that are written using two separate distinct elements.  # noqa: E501

        :return: The split_graphs of this Alphabet.  # noqa: E501
        :rtype: bool
        """
        return self._split_graphs

    @split_graphs.setter
    def split_graphs(self, split_graphs):
        """Sets the split_graphs of this Alphabet.

        If the Alphabet contains letters that are written using two separate distinct elements.  # noqa: E501

        :param split_graphs: The split_graphs of this Alphabet.  # noqa: E501
        :type: bool
        """

        self._split_graphs = split_graphs

    @property
    def status(self):
        """Gets the status of this Alphabet.  # noqa: E501

        The status of the alphabet  # noqa: E501

        :return: The status of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Alphabet.

        The status of the alphabet  # noqa: E501

        :param status: The status of this Alphabet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Current", "Historical", "Fictional", "Unclear"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def baseline(self):
        """Gets the baseline of this Alphabet.  # noqa: E501

        The alignment of the text within the alphabet  # noqa: E501

        :return: The baseline of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this Alphabet.

        The alignment of the text within the alphabet  # noqa: E501

        :param baseline: The baseline of this Alphabet.  # noqa: E501
        :type: str
        """
        allowed_values = ["Hanging", "Centered", "Bottom", "Vertical"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and baseline not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `baseline` ({0}), must be one of {1}"  # noqa: E501
                .format(baseline, allowed_values)
            )

        self._baseline = baseline

    @property
    def ligatures(self):
        """Gets the ligatures of this Alphabet.  # noqa: E501

        Indicates on if letters may be or are required to be joined as a single glyph  # noqa: E501

        :return: The ligatures of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._ligatures

    @ligatures.setter
    def ligatures(self, ligatures):
        """Sets the ligatures of this Alphabet.

        Indicates on if letters may be or are required to be joined as a single glyph  # noqa: E501

        :param ligatures: The ligatures of this Alphabet.  # noqa: E501
        :type: str
        """
        allowed_values = ["required", "optional", "none"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ligatures not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ligatures` ({0}), must be one of {1}"  # noqa: E501
                .format(ligatures, allowed_values)
            )

        self._ligatures = ligatures

    @property
    def direction(self):
        """Gets the direction of this Alphabet.  # noqa: E501

        The direction that the alphabet is read  # noqa: E501

        :return: The direction of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Alphabet.

        The direction that the alphabet is read  # noqa: E501

        :param direction: The direction of this Alphabet.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"rtl", "ltr", ""]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and direction not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def sample(self):
        """Gets the sample of this Alphabet.  # noqa: E501

        A sample section of text for the alphabet  # noqa: E501

        :return: The sample of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this Alphabet.

        A sample section of text for the alphabet  # noqa: E501

        :param sample: The sample of this Alphabet.  # noqa: E501
        :type: str
        """

        self._sample = sample

    @property
    def sample_img(self):
        """Gets the sample_img of this Alphabet.  # noqa: E501

        A url to an image of the sample section of text for the alphabet  # noqa: E501

        :return: The sample_img of this Alphabet.  # noqa: E501
        :rtype: str
        """
        return self._sample_img

    @sample_img.setter
    def sample_img(self, sample_img):
        """Sets the sample_img of this Alphabet.

        A url to an image of the sample section of text for the alphabet  # noqa: E501

        :param sample_img: The sample_img of this Alphabet.  # noqa: E501
        :type: str
        """

        self._sample_img = sample_img

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alphabet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Alphabet):
            return True

        return self.to_dict() != other.to_dict()
