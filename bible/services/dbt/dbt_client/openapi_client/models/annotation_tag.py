# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AnnotationTag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'note_id': 'Id',
        'bookmark_id': 'Id',
        'highlight_id': 'Id',
        'type': 'str',
        'value': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'note_id': 'note_id',
        'bookmark_id': 'bookmark_id',
        'highlight_id': 'highlight_id',
        'type': 'type',
        'value': 'value',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, note_id=None, bookmark_id=None, highlight_id=None, type=None, value=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """AnnotationTag - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._note_id = None
        self._bookmark_id = None
        self._highlight_id = None
        self._type = None
        self._value = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if note_id is not None:
            self.note_id = note_id
        if bookmark_id is not None:
            self.bookmark_id = bookmark_id
        if highlight_id is not None:
            self.highlight_id = highlight_id
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this AnnotationTag.  # noqa: E501

        The unique incrementing id for each NoteTag  # noqa: E501

        :return: The id of this AnnotationTag.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnnotationTag.

        The unique incrementing id for each NoteTag  # noqa: E501

        :param id: The id of this AnnotationTag.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def note_id(self):
        """Gets the note_id of this AnnotationTag.  # noqa: E501


        :return: The note_id of this AnnotationTag.  # noqa: E501
        :rtype: Id
        """
        return self._note_id

    @note_id.setter
    def note_id(self, note_id):
        """Sets the note_id of this AnnotationTag.


        :param note_id: The note_id of this AnnotationTag.  # noqa: E501
        :type: Id
        """

        self._note_id = note_id

    @property
    def bookmark_id(self):
        """Gets the bookmark_id of this AnnotationTag.  # noqa: E501


        :return: The bookmark_id of this AnnotationTag.  # noqa: E501
        :rtype: Id
        """
        return self._bookmark_id

    @bookmark_id.setter
    def bookmark_id(self, bookmark_id):
        """Sets the bookmark_id of this AnnotationTag.


        :param bookmark_id: The bookmark_id of this AnnotationTag.  # noqa: E501
        :type: Id
        """

        self._bookmark_id = bookmark_id

    @property
    def highlight_id(self):
        """Gets the highlight_id of this AnnotationTag.  # noqa: E501


        :return: The highlight_id of this AnnotationTag.  # noqa: E501
        :rtype: Id
        """
        return self._highlight_id

    @highlight_id.setter
    def highlight_id(self, highlight_id):
        """Sets the highlight_id of this AnnotationTag.


        :param highlight_id: The highlight_id of this AnnotationTag.  # noqa: E501
        :type: Id
        """

        self._highlight_id = highlight_id

    @property
    def type(self):
        """Gets the type of this AnnotationTag.  # noqa: E501

        The type of tag that this NoteTag is categorized within.  # noqa: E501

        :return: The type of this AnnotationTag.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnnotationTag.

        The type of tag that this NoteTag is categorized within.  # noqa: E501

        :param type: The type of this AnnotationTag.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this AnnotationTag.  # noqa: E501

        The value to the type of NoteTag for this note.  # noqa: E501

        :return: The value of this AnnotationTag.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AnnotationTag.

        The value to the type of NoteTag for this note.  # noqa: E501

        :param value: The value of this AnnotationTag.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def created_at(self):
        """Gets the created_at of this AnnotationTag.  # noqa: E501

        The timestamp the NoteTag was first created at  # noqa: E501

        :return: The created_at of this AnnotationTag.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnnotationTag.

        The timestamp the NoteTag was first created at  # noqa: E501

        :param created_at: The created_at of this AnnotationTag.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AnnotationTag.  # noqa: E501

        The timestamp the NoteTag was last updated  # noqa: E501

        :return: The updated_at of this AnnotationTag.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AnnotationTag.

        The timestamp the NoteTag was last updated  # noqa: E501

        :param updated_at: The updated_at of this AnnotationTag.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationTag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnnotationTag):
            return True

        return self.to_dict() != other.to_dict()
