# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Organization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'slug': 'str',
        'abbreviation': 'str',
        'notes': 'str',
        'primary_color': 'str',
        'secondary_color': 'str',
        'inactive': 'bool',
        'url_facebook': 'str',
        'url_website': 'str',
        'url_donate': 'str',
        'url_twitter': 'str',
        'address': 'str',
        'address2': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'zip': 'str',
        'phone': 'str',
        'email': 'str'
    }

    attribute_map = {
        'id': 'id',
        'slug': 'slug',
        'abbreviation': 'abbreviation',
        'notes': 'notes',
        'primary_color': 'primaryColor',
        'secondary_color': 'secondaryColor',
        'inactive': 'inactive',
        'url_facebook': 'url_facebook',
        'url_website': 'url_website',
        'url_donate': 'url_donate',
        'url_twitter': 'url_twitter',
        'address': 'address',
        'address2': 'address2',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'zip': 'zip',
        'phone': 'phone',
        'email': 'email'
    }

    def __init__(self, id=None, slug=None, abbreviation=None, notes=None, primary_color=None, secondary_color=None, inactive=None, url_facebook=None, url_website=None, url_donate=None, url_twitter=None, address=None, address2=None, city=None, state=None, country=None, zip=None, phone=None, email=None, local_vars_configuration=None):  # noqa: E501
        """Organization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._slug = None
        self._abbreviation = None
        self._notes = None
        self._primary_color = None
        self._secondary_color = None
        self._inactive = None
        self._url_facebook = None
        self._url_website = None
        self._url_donate = None
        self._url_twitter = None
        self._address = None
        self._address2 = None
        self._city = None
        self._state = None
        self._country = None
        self._zip = None
        self._phone = None
        self._email = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if slug is not None:
            self.slug = slug
        self.abbreviation = abbreviation
        self.notes = notes
        self.primary_color = primary_color
        self.secondary_color = secondary_color
        self.inactive = inactive
        if url_facebook is not None:
            self.url_facebook = url_facebook
        if url_website is not None:
            self.url_website = url_website
        if url_donate is not None:
            self.url_donate = url_donate
        if url_twitter is not None:
            self.url_twitter = url_twitter
        if address is not None:
            self.address = address
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if zip is not None:
            self.zip = zip
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501

        The Organization's incrementing id  # noqa: E501

        :return: The id of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.

        The Organization's incrementing id  # noqa: E501

        :param id: The id of this Organization.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this Organization.  # noqa: E501

        The Organization's name  # noqa: E501

        :return: The slug of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Organization.

        The Organization's name  # noqa: E501

        :param slug: The slug of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                slug is not None and len(slug) > 191):
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `191`")  # noqa: E501

        self._slug = slug

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Organization.  # noqa: E501

        The Organization's abbreviation  # noqa: E501

        :return: The abbreviation of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Organization.

        The Organization's abbreviation  # noqa: E501

        :param abbreviation: The abbreviation of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                abbreviation is not None and len(abbreviation) > 6):
            raise ValueError("Invalid value for `abbreviation`, length must be less than or equal to `6`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def notes(self):
        """Gets the notes of this Organization.  # noqa: E501

        Archivist notes about the organization being described  # noqa: E501

        :return: The notes of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Organization.

        Archivist notes about the organization being described  # noqa: E501

        :param notes: The notes of this Organization.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def primary_color(self):
        """Gets the primary_color of this Organization.  # noqa: E501

        The Organization's primary color derived from their logo  # noqa: E501

        :return: The primary_color of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this Organization.

        The Organization's primary color derived from their logo  # noqa: E501

        :param primary_color: The primary_color of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                primary_color is not None and len(primary_color) > 7):
            raise ValueError("Invalid value for `primary_color`, length must be less than or equal to `7`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                primary_color is not None and len(primary_color) < 7):
            raise ValueError("Invalid value for `primary_color`, length must be greater than or equal to `7`")  # noqa: E501

        self._primary_color = primary_color

    @property
    def secondary_color(self):
        """Gets the secondary_color of this Organization.  # noqa: E501

        The Organization's secondary color derived from their logo  # noqa: E501

        :return: The secondary_color of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._secondary_color

    @secondary_color.setter
    def secondary_color(self, secondary_color):
        """Sets the secondary_color of this Organization.

        The Organization's secondary color derived from their logo  # noqa: E501

        :param secondary_color: The secondary_color of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                secondary_color is not None and len(secondary_color) > 7):
            raise ValueError("Invalid value for `secondary_color`, length must be less than or equal to `7`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                secondary_color is not None and len(secondary_color) < 7):
            raise ValueError("Invalid value for `secondary_color`, length must be greater than or equal to `7`")  # noqa: E501

        self._secondary_color = secondary_color

    @property
    def inactive(self):
        """Gets the inactive of this Organization.  # noqa: E501

        If the organization has not responded to several attempts to contact this value will be set to true  # noqa: E501

        :return: The inactive of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this Organization.

        If the organization has not responded to several attempts to contact this value will be set to true  # noqa: E501

        :param inactive: The inactive of this Organization.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def url_facebook(self):
        """Gets the url_facebook of this Organization.  # noqa: E501

        The URL to the organization's facebook page  # noqa: E501

        :return: The url_facebook of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._url_facebook

    @url_facebook.setter
    def url_facebook(self, url_facebook):
        """Sets the url_facebook of this Organization.

        The URL to the organization's facebook page  # noqa: E501

        :param url_facebook: The url_facebook of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_facebook is not None and len(url_facebook) > 191):
            raise ValueError("Invalid value for `url_facebook`, length must be less than or equal to `191`")  # noqa: E501

        self._url_facebook = url_facebook

    @property
    def url_website(self):
        """Gets the url_website of this Organization.  # noqa: E501

        The url to the Organization's website  # noqa: E501

        :return: The url_website of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._url_website

    @url_website.setter
    def url_website(self, url_website):
        """Sets the url_website of this Organization.

        The url to the Organization's website  # noqa: E501

        :param url_website: The url_website of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_website is not None and len(url_website) > 191):
            raise ValueError("Invalid value for `url_website`, length must be less than or equal to `191`")  # noqa: E501

        self._url_website = url_website

    @property
    def url_donate(self):
        """Gets the url_donate of this Organization.  # noqa: E501

        The url to the organization's donation page  # noqa: E501

        :return: The url_donate of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._url_donate

    @url_donate.setter
    def url_donate(self, url_donate):
        """Sets the url_donate of this Organization.

        The url to the organization's donation page  # noqa: E501

        :param url_donate: The url_donate of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_donate is not None and len(url_donate) > 191):
            raise ValueError("Invalid value for `url_donate`, length must be less than or equal to `191`")  # noqa: E501

        self._url_donate = url_donate

    @property
    def url_twitter(self):
        """Gets the url_twitter of this Organization.  # noqa: E501

        The url to the organization's twitter page  # noqa: E501

        :return: The url_twitter of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._url_twitter

    @url_twitter.setter
    def url_twitter(self, url_twitter):
        """Sets the url_twitter of this Organization.

        The url to the organization's twitter page  # noqa: E501

        :param url_twitter: The url_twitter of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_twitter is not None and len(url_twitter) > 191):
            raise ValueError("Invalid value for `url_twitter`, length must be less than or equal to `191`")  # noqa: E501

        self._url_twitter = url_twitter

    @property
    def address(self):
        """Gets the address of this Organization.  # noqa: E501

        The Organization's address  # noqa: E501

        :return: The address of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Organization.

        The Organization's address  # noqa: E501

        :param address: The address of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address is not None and len(address) > 191):
            raise ValueError("Invalid value for `address`, length must be less than or equal to `191`")  # noqa: E501

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this Organization.  # noqa: E501

        The Organization's second line of the address  # noqa: E501

        :return: The address2 of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Organization.

        The Organization's second line of the address  # noqa: E501

        :param address2: The address2 of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address2 is not None and len(address2) > 191):
            raise ValueError("Invalid value for `address2`, length must be less than or equal to `191`")  # noqa: E501

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this Organization.  # noqa: E501

        The organization's city  # noqa: E501

        :return: The city of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organization.

        The organization's city  # noqa: E501

        :param city: The city of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                city is not None and len(city) > 191):
            raise ValueError("Invalid value for `city`, length must be less than or equal to `191`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this Organization.  # noqa: E501

        The Organization's state  # noqa: E501

        :return: The state of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Organization.

        The Organization's state  # noqa: E501

        :param state: The state of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                state is not None and len(state) > 191):
            raise ValueError("Invalid value for `state`, length must be less than or equal to `191`")  # noqa: E501

        self._state = state

    @property
    def country(self):
        """Gets the country of this Organization.  # noqa: E501

        ThThe Organization's country  # noqa: E501

        :return: The country of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Organization.

        ThThe Organization's country  # noqa: E501

        :param country: The country of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                country is not None and len(country) > 191):
            raise ValueError("Invalid value for `country`, length must be less than or equal to `191`")  # noqa: E501

        self._country = country

    @property
    def zip(self):
        """Gets the zip of this Organization.  # noqa: E501

        The Organization's zip  # noqa: E501

        :return: The zip of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Organization.

        The Organization's zip  # noqa: E501

        :param zip: The zip of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                zip is not None and len(zip) > 191):
            raise ValueError("Invalid value for `zip`, length must be less than or equal to `191`")  # noqa: E501

        self._zip = zip

    @property
    def phone(self):
        """Gets the phone of this Organization.  # noqa: E501

        The Organization's phone number  # noqa: E501

        :return: The phone of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Organization.

        The Organization's phone number  # noqa: E501

        :param phone: The phone of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                phone is not None and len(phone) > 191):
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `191`")  # noqa: E501

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this Organization.  # noqa: E501

        The Organization's email address  # noqa: E501

        :return: The email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Organization.

        The Organization's email address  # noqa: E501

        :param email: The email of this Organization.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 191):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `191`")  # noqa: E501

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Organization):
            return True

        return self.to_dict() != other.to_dict()
