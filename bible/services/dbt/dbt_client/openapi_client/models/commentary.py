# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Commentary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'str',
        'author': 'str',
        'date': 'int',
        'features': 'int',
        'publisher': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'author': 'author',
        'date': 'date',
        'features': 'features',
        'publisher': 'publisher'
    }

    def __init__(self, id=None, type=None, author=None, date=None, features=None, publisher=None, local_vars_configuration=None):  # noqa: E501
        """Commentary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._author = None
        self._date = None
        self._features = None
        self._publisher = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if author is not None:
            self.author = author
        if date is not None:
            self.date = date
        if features is not None:
            self.features = features
        if publisher is not None:
            self.publisher = publisher

    @property
    def id(self):
        """Gets the id of this Commentary.  # noqa: E501

        The unique ID for the commentary, for example the English Treasure of Scripture Knowledge id is ENGTSK  # noqa: E501

        :return: The id of this Commentary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Commentary.

        The unique ID for the commentary, for example the English Treasure of Scripture Knowledge id is ENGTSK  # noqa: E501

        :param id: The id of this Commentary.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 12):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `12`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 6):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `6`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this Commentary.  # noqa: E501

        The genre of commentary being described  # noqa: E501

        :return: The type of this Commentary.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Commentary.

        The genre of commentary being described  # noqa: E501

        :param type: The type of this Commentary.  # noqa: E501
        :type: str
        """
        allowed_values = ["critical", "devotional", "pastoral", "exegetical"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def author(self):
        """Gets the author of this Commentary.  # noqa: E501

        The author of the commentary  # noqa: E501

        :return: The author of this Commentary.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Commentary.

        The author of the commentary  # noqa: E501

        :param author: The author of this Commentary.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                author is not None and len(author) > 191):
            raise ValueError("Invalid value for `author`, length must be less than or equal to `191`")  # noqa: E501

        self._author = author

    @property
    def date(self):
        """Gets the date of this Commentary.  # noqa: E501

        The year the commentary was published  # noqa: E501

        :return: The date of this Commentary.  # noqa: E501
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Commentary.

        The year the commentary was published  # noqa: E501

        :param date: The date of this Commentary.  # noqa: E501
        :type: int
        """

        self._date = date

    @property
    def features(self):
        """Gets the features of this Commentary.  # noqa: E501

        The year the commentary was published  # noqa: E501

        :return: The features of this Commentary.  # noqa: E501
        :rtype: int
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Commentary.

        The year the commentary was published  # noqa: E501

        :param features: The features of this Commentary.  # noqa: E501
        :type: int
        """

        self._features = features

    @property
    def publisher(self):
        """Gets the publisher of this Commentary.  # noqa: E501

        The original publisher of the commentary  # noqa: E501

        :return: The publisher of this Commentary.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Commentary.

        The original publisher of the commentary  # noqa: E501

        :param publisher: The publisher of this Commentary.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Commentary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Commentary):
            return True

        return self.to_dict() != other.to_dict()
