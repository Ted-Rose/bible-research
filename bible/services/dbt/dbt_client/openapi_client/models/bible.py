# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Bible(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'custom_font_required': 'bool',
        'id': 'str',
        'language_id': 'Id',
        'date': 'int',
        'scope': 'SetSizeCode',
        'derived': 'str',
        'copyright': 'str',
        'versification': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'custom_font_required': 'custom_font_required',
        'id': 'id',
        'language_id': 'language_id',
        'date': 'date',
        'scope': 'scope',
        'derived': 'derived',
        'copyright': 'copyright',
        'versification': 'versification',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, custom_font_required=None, id=None, language_id=None, date=None, scope=None, derived=None, copyright=None, versification=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Bible - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._custom_font_required = None
        self._id = None
        self._language_id = None
        self._date = None
        self._scope = None
        self._derived = None
        self._copyright = None
        self._versification = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if custom_font_required is not None:
            self.custom_font_required = custom_font_required
        if id is not None:
            self.id = id
        if language_id is not None:
            self.language_id = language_id
        if date is not None:
            self.date = date
        if scope is not None:
            self.scope = scope
        self.derived = derived
        if copyright is not None:
            self.copyright = copyright
        if versification is not None:
            self.versification = versification
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def custom_font_required(self):
        """Gets the custom_font_required of this Bible.  # noqa: E501

        Flag to mark if the bible has a custom font  # noqa: E501

        :return: The custom_font_required of this Bible.  # noqa: E501
        :rtype: bool
        """
        return self._custom_font_required

    @custom_font_required.setter
    def custom_font_required(self, custom_font_required):
        """Sets the custom_font_required of this Bible.

        Flag to mark if the bible has a custom font  # noqa: E501

        :param custom_font_required: The custom_font_required of this Bible.  # noqa: E501
        :type: bool
        """

        self._custom_font_required = custom_font_required

    @property
    def id(self):
        """Gets the id of this Bible.  # noqa: E501

        The Archivist created Bible ID string. This will be between six and twelve letters usually starting with the iso639-3 code and ending with the acronym for the Bible  # noqa: E501

        :return: The id of this Bible.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bible.

        The Archivist created Bible ID string. This will be between six and twelve letters usually starting with the iso639-3 code and ending with the acronym for the Bible  # noqa: E501

        :param id: The id of this Bible.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 12):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `12`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 6):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `6`")  # noqa: E501

        self._id = id

    @property
    def language_id(self):
        """Gets the language_id of this Bible.  # noqa: E501


        :return: The language_id of this Bible.  # noqa: E501
        :rtype: Id
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this Bible.


        :param language_id: The language_id of this Bible.  # noqa: E501
        :type: Id
        """

        self._language_id = language_id

    @property
    def date(self):
        """Gets the date of this Bible.  # noqa: E501

        The year the Bible was originally published  # noqa: E501

        :return: The date of this Bible.  # noqa: E501
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Bible.

        The year the Bible was originally published  # noqa: E501

        :param date: The date of this Bible.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                date is not None and date > 4):  # noqa: E501
            raise ValueError("Invalid value for `date`, must be a value less than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                date is not None and date < 1):  # noqa: E501
            raise ValueError("Invalid value for `date`, must be a value greater than or equal to `1`")  # noqa: E501

        self._date = date

    @property
    def scope(self):
        """Gets the scope of this Bible.  # noqa: E501


        :return: The scope of this Bible.  # noqa: E501
        :rtype: SetSizeCode
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Bible.


        :param scope: The scope of this Bible.  # noqa: E501
        :type: SetSizeCode
        """

        self._scope = scope

    @property
    def derived(self):
        """Gets the derived of this Bible.  # noqa: E501

        This field indicates the Bible from which the current Scriptures being described are derived.  # noqa: E501

        :return: The derived of this Bible.  # noqa: E501
        :rtype: str
        """
        return self._derived

    @derived.setter
    def derived(self, derived):
        """Sets the derived of this Bible.

        This field indicates the Bible from which the current Scriptures being described are derived.  # noqa: E501

        :param derived: The derived of this Bible.  # noqa: E501
        :type: str
        """

        self._derived = derived

    @property
    def copyright(self):
        """Gets the copyright of this Bible.  # noqa: E501

        A short copyright description for the bible text.  # noqa: E501

        :return: The copyright of this Bible.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Bible.

        A short copyright description for the bible text.  # noqa: E501

        :param copyright: The copyright of this Bible.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                copyright is not None and len(copyright) > 191):
            raise ValueError("Invalid value for `copyright`, length must be less than or equal to `191`")  # noqa: E501

        self._copyright = copyright

    @property
    def versification(self):
        """Gets the versification of this Bible.  # noqa: E501

        The versification system for ordering books and chapters  # noqa: E501

        :return: The versification of this Bible.  # noqa: E501
        :rtype: str
        """
        return self._versification

    @versification.setter
    def versification(self, versification):
        """Sets the versification of this Bible.

        The versification system for ordering books and chapters  # noqa: E501

        :param versification: The versification of this Bible.  # noqa: E501
        :type: str
        """
        allowed_values = ["protestant", "luther", "synodal", "german", "kjva", "vulgate", "lxx", "orthodox", "nrsva", "catholic", "finnish"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and versification not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `versification` ({0}), must be one of {1}"  # noqa: E501
                .format(versification, allowed_values)
            )

        self._versification = versification

    @property
    def created_at(self):
        """Gets the created_at of this Bible.  # noqa: E501

        The timestamp at which the bible was originally created  # noqa: E501

        :return: The created_at of this Bible.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Bible.

        The timestamp at which the bible was originally created  # noqa: E501

        :param created_at: The created_at of this Bible.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Bible.  # noqa: E501

        The timestamp at which the bible was last updated  # noqa: E501

        :return: The updated_at of this Bible.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Bible.

        The timestamp at which the bible was last updated  # noqa: E501

        :param updated_at: The updated_at of this Bible.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bible):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Bible):
            return True

        return self.to_dict() != other.to_dict()
