# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Language(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'glotto_id': 'str',
        'iso': 'str',
        'name': 'str',
        'maps': 'str',
        'development': 'str',
        'use': 'str',
        'location': 'str',
        'area': 'str',
        'population': 'float',
        'population_notes': 'str',
        'notes': 'str',
        'typology': 'str',
        'description': 'str',
        'status': 'str',
        'country_id': 'str',
        'rolv_code': 'str',
        'deleted_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'glotto_id': 'glotto_id',
        'iso': 'iso',
        'name': 'name',
        'maps': 'maps',
        'development': 'development',
        'use': 'use',
        'location': 'location',
        'area': 'area',
        'population': 'population',
        'population_notes': 'population_notes',
        'notes': 'notes',
        'typology': 'typology',
        'description': 'description',
        'status': 'status',
        'country_id': 'country_id',
        'rolv_code': 'rolv_code',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, id=None, glotto_id=None, iso=None, name=None, maps=None, development=None, use=None, location=None, area=None, population=None, population_notes=None, notes=None, typology=None, description=None, status=None, country_id=None, rolv_code=None, deleted_at=None, local_vars_configuration=None):  # noqa: E501
        """Language - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._glotto_id = None
        self._iso = None
        self._name = None
        self._maps = None
        self._development = None
        self._use = None
        self._location = None
        self._area = None
        self._population = None
        self._population_notes = None
        self._notes = None
        self._typology = None
        self._description = None
        self._status = None
        self._country_id = None
        self._rolv_code = None
        self._deleted_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if glotto_id is not None:
            self.glotto_id = glotto_id
        if iso is not None:
            self.iso = iso
        if name is not None:
            self.name = name
        if maps is not None:
            self.maps = maps
        if development is not None:
            self.development = development
        if use is not None:
            self.use = use
        if location is not None:
            self.location = location
        if area is not None:
            self.area = area
        if population is not None:
            self.population = population
        if population_notes is not None:
            self.population_notes = population_notes
        if notes is not None:
            self.notes = notes
        if typology is not None:
            self.typology = typology
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if country_id is not None:
            self.country_id = country_id
        if rolv_code is not None:
            self.rolv_code = rolv_code
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def id(self):
        """Gets the id of this Language.  # noqa: E501

        The incrementing ID for the language  # noqa: E501

        :return: The id of this Language.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Language.

        The incrementing ID for the language  # noqa: E501

        :param id: The id of this Language.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def glotto_id(self):
        """Gets the glotto_id of this Language.  # noqa: E501

        The glottolog ID for the language  # noqa: E501

        :return: The glotto_id of this Language.  # noqa: E501
        :rtype: str
        """
        return self._glotto_id

    @glotto_id.setter
    def glotto_id(self, glotto_id):
        """Sets the glotto_id of this Language.

        The glottolog ID for the language  # noqa: E501

        :param glotto_id: The glotto_id of this Language.  # noqa: E501
        :type: str
        """

        self._glotto_id = glotto_id

    @property
    def iso(self):
        """Gets the iso of this Language.  # noqa: E501

        The iso 639-3 for the language  # noqa: E501

        :return: The iso of this Language.  # noqa: E501
        :rtype: str
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this Language.

        The iso 639-3 for the language  # noqa: E501

        :param iso: The iso of this Language.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                iso is not None and len(iso) > 3):
            raise ValueError("Invalid value for `iso`, length must be less than or equal to `3`")  # noqa: E501

        self._iso = iso

    @property
    def name(self):
        """Gets the name of this Language.  # noqa: E501

        The name of the language  # noqa: E501

        :return: The name of this Language.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Language.

        The name of the language  # noqa: E501

        :param name: The name of this Language.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 191):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `191`")  # noqa: E501

        self._name = name

    @property
    def maps(self):
        """Gets the maps of this Language.  # noqa: E501

        The general area where the language can be found  # noqa: E501

        :return: The maps of this Language.  # noqa: E501
        :rtype: str
        """
        return self._maps

    @maps.setter
    def maps(self, maps):
        """Sets the maps of this Language.

        The general area where the language can be found  # noqa: E501

        :param maps: The maps of this Language.  # noqa: E501
        :type: str
        """

        self._maps = maps

    @property
    def development(self):
        """Gets the development of this Language.  # noqa: E501

        The development of the growth of the language  # noqa: E501

        :return: The development of this Language.  # noqa: E501
        :rtype: str
        """
        return self._development

    @development.setter
    def development(self, development):
        """Sets the development of this Language.

        The development of the growth of the language  # noqa: E501

        :param development: The development of this Language.  # noqa: E501
        :type: str
        """

        self._development = development

    @property
    def use(self):
        """Gets the use of this Language.  # noqa: E501

        The use of the language  # noqa: E501

        :return: The use of this Language.  # noqa: E501
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this Language.

        The use of the language  # noqa: E501

        :param use: The use of this Language.  # noqa: E501
        :type: str
        """

        self._use = use

    @property
    def location(self):
        """Gets the location of this Language.  # noqa: E501

        The location of the language  # noqa: E501

        :return: The location of this Language.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Language.

        The location of the language  # noqa: E501

        :param location: The location of this Language.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def area(self):
        """Gets the area of this Language.  # noqa: E501

        The area of the language  # noqa: E501

        :return: The area of this Language.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Language.

        The area of the language  # noqa: E501

        :param area: The area of this Language.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def population(self):
        """Gets the population of this Language.  # noqa: E501

        The estimated number of people that speak the language  # noqa: E501

        :return: The population of this Language.  # noqa: E501
        :rtype: float
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this Language.

        The estimated number of people that speak the language  # noqa: E501

        :param population: The population of this Language.  # noqa: E501
        :type: float
        """

        self._population = population

    @property
    def population_notes(self):
        """Gets the population_notes of this Language.  # noqa: E501

        Any notes regarding the estimated number of people  # noqa: E501

        :return: The population_notes of this Language.  # noqa: E501
        :rtype: str
        """
        return self._population_notes

    @population_notes.setter
    def population_notes(self, population_notes):
        """Sets the population_notes of this Language.

        Any notes regarding the estimated number of people  # noqa: E501

        :param population_notes: The population_notes of this Language.  # noqa: E501
        :type: str
        """

        self._population_notes = population_notes

    @property
    def notes(self):
        """Gets the notes of this Language.  # noqa: E501

        Any notes regarding the language  # noqa: E501

        :return: The notes of this Language.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Language.

        Any notes regarding the language  # noqa: E501

        :param notes: The notes of this Language.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def typology(self):
        """Gets the typology of this Language.  # noqa: E501

        The language's Typology  # noqa: E501

        :return: The typology of this Language.  # noqa: E501
        :rtype: str
        """
        return self._typology

    @typology.setter
    def typology(self, typology):
        """Sets the typology of this Language.

        The language's Typology  # noqa: E501

        :param typology: The typology of this Language.  # noqa: E501
        :type: str
        """

        self._typology = typology

    @property
    def description(self):
        """Gets the description of this Language.  # noqa: E501

        The description of the language  # noqa: E501

        :return: The description of this Language.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Language.

        The description of the language  # noqa: E501

        :param description: The description of this Language.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Language.  # noqa: E501

        A status of the language  # noqa: E501

        :return: The status of this Language.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Language.

        A status of the language  # noqa: E501

        :param status: The status of this Language.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def country_id(self):
        """Gets the country_id of this Language.  # noqa: E501

        The primary country where the language is spoken  # noqa: E501

        :return: The country_id of this Language.  # noqa: E501
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this Language.

        The primary country where the language is spoken  # noqa: E501

        :param country_id: The country_id of this Language.  # noqa: E501
        :type: str
        """

        self._country_id = country_id

    @property
    def rolv_code(self):
        """Gets the rolv_code of this Language.  # noqa: E501


        :return: The rolv_code of this Language.  # noqa: E501
        :rtype: str
        """
        return self._rolv_code

    @rolv_code.setter
    def rolv_code(self, rolv_code):
        """Sets the rolv_code of this Language.


        :param rolv_code: The rolv_code of this Language.  # noqa: E501
        :type: str
        """

        self._rolv_code = rolv_code

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Language.  # noqa: E501


        :return: The deleted_at of this Language.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Language.


        :param deleted_at: The deleted_at of this Language.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Language):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Language):
            return True

        return self.to_dict() != other.to_dict()
