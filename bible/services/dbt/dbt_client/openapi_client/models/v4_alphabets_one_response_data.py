# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V4AlphabetsOneResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'Name',
        'script': 'Script',
        'family': 'Family',
        'type': 'Type',
        'direction': 'Direction',
        'fonts': 'list[AlphabetFont]',
        'languages': 'list[Language]',
        'bibles': 'list[Bible]'
    }

    attribute_map = {
        'name': 'name',
        'script': 'script',
        'family': 'family',
        'type': 'type',
        'direction': 'direction',
        'fonts': 'fonts',
        'languages': 'languages',
        'bibles': 'bibles'
    }

    def __init__(self, name=None, script=None, family=None, type=None, direction=None, fonts=None, languages=None, bibles=None, local_vars_configuration=None):  # noqa: E501
        """V4AlphabetsOneResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._script = None
        self._family = None
        self._type = None
        self._direction = None
        self._fonts = None
        self._languages = None
        self._bibles = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if script is not None:
            self.script = script
        if family is not None:
            self.family = family
        if type is not None:
            self.type = type
        if direction is not None:
            self.direction = direction
        if fonts is not None:
            self.fonts = fonts
        if languages is not None:
            self.languages = languages
        if bibles is not None:
            self.bibles = bibles

    @property
    def name(self):
        """Gets the name of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The name of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V4AlphabetsOneResponseData.


        :param name: The name of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: Name
        """

        self._name = name

    @property
    def script(self):
        """Gets the script of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The script of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: Script
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this V4AlphabetsOneResponseData.


        :param script: The script of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: Script
        """

        self._script = script

    @property
    def family(self):
        """Gets the family of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The family of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: Family
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this V4AlphabetsOneResponseData.


        :param family: The family of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: Family
        """

        self._family = family

    @property
    def type(self):
        """Gets the type of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The type of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V4AlphabetsOneResponseData.


        :param type: The type of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: Type
        """

        self._type = type

    @property
    def direction(self):
        """Gets the direction of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The direction of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this V4AlphabetsOneResponseData.


        :param direction: The direction of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: Direction
        """

        self._direction = direction

    @property
    def fonts(self):
        """Gets the fonts of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The fonts of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: list[AlphabetFont]
        """
        return self._fonts

    @fonts.setter
    def fonts(self, fonts):
        """Sets the fonts of this V4AlphabetsOneResponseData.


        :param fonts: The fonts of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: list[AlphabetFont]
        """

        self._fonts = fonts

    @property
    def languages(self):
        """Gets the languages of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The languages of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: list[Language]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this V4AlphabetsOneResponseData.


        :param languages: The languages of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: list[Language]
        """

        self._languages = languages

    @property
    def bibles(self):
        """Gets the bibles of this V4AlphabetsOneResponseData.  # noqa: E501


        :return: The bibles of this V4AlphabetsOneResponseData.  # noqa: E501
        :rtype: list[Bible]
        """
        return self._bibles

    @bibles.setter
    def bibles(self, bibles):
        """Sets the bibles of this V4AlphabetsOneResponseData.


        :param bibles: The bibles of this V4AlphabetsOneResponseData.  # noqa: E501
        :type: list[Bible]
        """

        self._bibles = bibles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4AlphabetsOneResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4AlphabetsOneResponseData):
            return True

        return self.to_dict() != other.to_dict()
