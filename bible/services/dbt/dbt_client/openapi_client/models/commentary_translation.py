# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CommentaryTranslation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language_id': 'LanguageId',
        'commentary_id': 'Id',
        'vernacular': 'str',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'language_id': 'language_id',
        'commentary_id': 'commentary_id',
        'vernacular': 'vernacular',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, language_id=None, commentary_id=None, vernacular=None, name=None, description=None, local_vars_configuration=None):  # noqa: E501
        """CommentaryTranslation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language_id = None
        self._commentary_id = None
        self._vernacular = None
        self._name = None
        self._description = None
        self.discriminator = None

        if language_id is not None:
            self.language_id = language_id
        if commentary_id is not None:
            self.commentary_id = commentary_id
        if vernacular is not None:
            self.vernacular = vernacular
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description

    @property
    def language_id(self):
        """Gets the language_id of this CommentaryTranslation.  # noqa: E501


        :return: The language_id of this CommentaryTranslation.  # noqa: E501
        :rtype: LanguageId
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this CommentaryTranslation.


        :param language_id: The language_id of this CommentaryTranslation.  # noqa: E501
        :type: LanguageId
        """

        self._language_id = language_id

    @property
    def commentary_id(self):
        """Gets the commentary_id of this CommentaryTranslation.  # noqa: E501


        :return: The commentary_id of this CommentaryTranslation.  # noqa: E501
        :rtype: Id
        """
        return self._commentary_id

    @commentary_id.setter
    def commentary_id(self, commentary_id):
        """Sets the commentary_id of this CommentaryTranslation.


        :param commentary_id: The commentary_id of this CommentaryTranslation.  # noqa: E501
        :type: Id
        """

        self._commentary_id = commentary_id

    @property
    def vernacular(self):
        """Gets the vernacular of this CommentaryTranslation.  # noqa: E501

        $vernacular  # noqa: E501

        :return: The vernacular of this CommentaryTranslation.  # noqa: E501
        :rtype: str
        """
        return self._vernacular

    @vernacular.setter
    def vernacular(self, vernacular):
        """Sets the vernacular of this CommentaryTranslation.

        $vernacular  # noqa: E501

        :param vernacular: The vernacular of this CommentaryTranslation.  # noqa: E501
        :type: str
        """

        self._vernacular = vernacular

    @property
    def name(self):
        """Gets the name of this CommentaryTranslation.  # noqa: E501

        $name  # noqa: E501

        :return: The name of this CommentaryTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommentaryTranslation.

        $name  # noqa: E501

        :param name: The name of this CommentaryTranslation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CommentaryTranslation.  # noqa: E501

        $description  # noqa: E501

        :return: The description of this CommentaryTranslation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommentaryTranslation.

        $description  # noqa: E501

        :param description: The description of this CommentaryTranslation.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentaryTranslation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommentaryTranslation):
            return True

        return self.to_dict() != other.to_dict()
