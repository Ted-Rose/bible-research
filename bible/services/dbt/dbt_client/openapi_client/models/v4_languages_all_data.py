# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V4LanguagesAllData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'Id',
        'glotto_id': 'GlottoId',
        'iso': 'Iso',
        'name': 'Name',
        'autonym': 'Name',
        'bibles': 'int',
        'filesets': 'int',
        'country_population': 'Population'
    }

    attribute_map = {
        'id': 'id',
        'glotto_id': 'glotto_id',
        'iso': 'iso',
        'name': 'name',
        'autonym': 'autonym',
        'bibles': 'bibles',
        'filesets': 'filesets',
        'country_population': 'country_population'
    }

    def __init__(self, id=None, glotto_id=None, iso=None, name=None, autonym=None, bibles=None, filesets=None, country_population=None, local_vars_configuration=None):  # noqa: E501
        """V4LanguagesAllData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._glotto_id = None
        self._iso = None
        self._name = None
        self._autonym = None
        self._bibles = None
        self._filesets = None
        self._country_population = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if glotto_id is not None:
            self.glotto_id = glotto_id
        if iso is not None:
            self.iso = iso
        if name is not None:
            self.name = name
        if autonym is not None:
            self.autonym = autonym
        if bibles is not None:
            self.bibles = bibles
        if filesets is not None:
            self.filesets = filesets
        if country_population is not None:
            self.country_population = country_population

    @property
    def id(self):
        """Gets the id of this V4LanguagesAllData.  # noqa: E501


        :return: The id of this V4LanguagesAllData.  # noqa: E501
        :rtype: Id
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V4LanguagesAllData.


        :param id: The id of this V4LanguagesAllData.  # noqa: E501
        :type: Id
        """

        self._id = id

    @property
    def glotto_id(self):
        """Gets the glotto_id of this V4LanguagesAllData.  # noqa: E501


        :return: The glotto_id of this V4LanguagesAllData.  # noqa: E501
        :rtype: GlottoId
        """
        return self._glotto_id

    @glotto_id.setter
    def glotto_id(self, glotto_id):
        """Sets the glotto_id of this V4LanguagesAllData.


        :param glotto_id: The glotto_id of this V4LanguagesAllData.  # noqa: E501
        :type: GlottoId
        """

        self._glotto_id = glotto_id

    @property
    def iso(self):
        """Gets the iso of this V4LanguagesAllData.  # noqa: E501


        :return: The iso of this V4LanguagesAllData.  # noqa: E501
        :rtype: Iso
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this V4LanguagesAllData.


        :param iso: The iso of this V4LanguagesAllData.  # noqa: E501
        :type: Iso
        """

        self._iso = iso

    @property
    def name(self):
        """Gets the name of this V4LanguagesAllData.  # noqa: E501


        :return: The name of this V4LanguagesAllData.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V4LanguagesAllData.


        :param name: The name of this V4LanguagesAllData.  # noqa: E501
        :type: Name
        """

        self._name = name

    @property
    def autonym(self):
        """Gets the autonym of this V4LanguagesAllData.  # noqa: E501


        :return: The autonym of this V4LanguagesAllData.  # noqa: E501
        :rtype: Name
        """
        return self._autonym

    @autonym.setter
    def autonym(self, autonym):
        """Sets the autonym of this V4LanguagesAllData.


        :param autonym: The autonym of this V4LanguagesAllData.  # noqa: E501
        :type: Name
        """

        self._autonym = autonym

    @property
    def bibles(self):
        """Gets the bibles of this V4LanguagesAllData.  # noqa: E501


        :return: The bibles of this V4LanguagesAllData.  # noqa: E501
        :rtype: int
        """
        return self._bibles

    @bibles.setter
    def bibles(self, bibles):
        """Sets the bibles of this V4LanguagesAllData.


        :param bibles: The bibles of this V4LanguagesAllData.  # noqa: E501
        :type: int
        """

        self._bibles = bibles

    @property
    def filesets(self):
        """Gets the filesets of this V4LanguagesAllData.  # noqa: E501


        :return: The filesets of this V4LanguagesAllData.  # noqa: E501
        :rtype: int
        """
        return self._filesets

    @filesets.setter
    def filesets(self, filesets):
        """Sets the filesets of this V4LanguagesAllData.


        :param filesets: The filesets of this V4LanguagesAllData.  # noqa: E501
        :type: int
        """

        self._filesets = filesets

    @property
    def country_population(self):
        """Gets the country_population of this V4LanguagesAllData.  # noqa: E501


        :return: The country_population of this V4LanguagesAllData.  # noqa: E501
        :rtype: Population
        """
        return self._country_population

    @country_population.setter
    def country_population(self, country_population):
        """Sets the country_population of this V4LanguagesAllData.


        :param country_population: The country_population of this V4LanguagesAllData.  # noqa: E501
        :type: Population
        """

        self._country_population = country_population

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4LanguagesAllData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4LanguagesAllData):
            return True

        return self.to_dict() != other.to_dict()
