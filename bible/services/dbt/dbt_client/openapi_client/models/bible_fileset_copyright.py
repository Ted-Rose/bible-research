# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleFilesetCopyright(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'copyright_date': 'str',
        'copyright': 'str',
        'copyright_description': 'str',
        'open_access': 'int'
    }

    attribute_map = {
        'copyright_date': 'copyright_date',
        'copyright': 'copyright',
        'copyright_description': 'copyright_description',
        'open_access': 'open_access'
    }

    def __init__(self, copyright_date=None, copyright=None, copyright_description=None, open_access=None, local_vars_configuration=None):  # noqa: E501
        """BibleFilesetCopyright - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._copyright_date = None
        self._copyright = None
        self._copyright_description = None
        self._open_access = None
        self.discriminator = None

        if copyright_date is not None:
            self.copyright_date = copyright_date
        if copyright is not None:
            self.copyright = copyright
        if copyright_description is not None:
            self.copyright_description = copyright_description
        if open_access is not None:
            self.open_access = open_access

    @property
    def copyright_date(self):
        """Gets the copyright_date of this BibleFilesetCopyright.  # noqa: E501

        The copyright date created copyright  # noqa: E501

        :return: The copyright_date of this BibleFilesetCopyright.  # noqa: E501
        :rtype: str
        """
        return self._copyright_date

    @copyright_date.setter
    def copyright_date(self, copyright_date):
        """Sets the copyright_date of this BibleFilesetCopyright.

        The copyright date created copyright  # noqa: E501

        :param copyright_date: The copyright_date of this BibleFilesetCopyright.  # noqa: E501
        :type: str
        """

        self._copyright_date = copyright_date

    @property
    def copyright(self):
        """Gets the copyright of this BibleFilesetCopyright.  # noqa: E501

        The copyright  # noqa: E501

        :return: The copyright of this BibleFilesetCopyright.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this BibleFilesetCopyright.

        The copyright  # noqa: E501

        :param copyright: The copyright of this BibleFilesetCopyright.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def copyright_description(self):
        """Gets the copyright_description of this BibleFilesetCopyright.  # noqa: E501

        The copyright description  # noqa: E501

        :return: The copyright_description of this BibleFilesetCopyright.  # noqa: E501
        :rtype: str
        """
        return self._copyright_description

    @copyright_description.setter
    def copyright_description(self, copyright_description):
        """Sets the copyright_description of this BibleFilesetCopyright.

        The copyright description  # noqa: E501

        :param copyright_description: The copyright_description of this BibleFilesetCopyright.  # noqa: E501
        :type: str
        """

        self._copyright_description = copyright_description

    @property
    def open_access(self):
        """Gets the open_access of this BibleFilesetCopyright.  # noqa: E501

        The open_access description  # noqa: E501

        :return: The open_access of this BibleFilesetCopyright.  # noqa: E501
        :rtype: int
        """
        return self._open_access

    @open_access.setter
    def open_access(self, open_access):
        """Sets the open_access of this BibleFilesetCopyright.

        The open_access description  # noqa: E501

        :param open_access: The open_access of this BibleFilesetCopyright.  # noqa: E501
        :type: int
        """

        self._open_access = open_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleFilesetCopyright):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleFilesetCopyright):
            return True

        return self.to_dict() != other.to_dict()
