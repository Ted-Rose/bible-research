# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PlaylistItemDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'Id',
        'bible_id': 'Id',
        'fileset_id': 'FilesetId',
        'book_id': 'BookId',
        'chapter_start': 'ChapterStart',
        'chapter_end': 'ChapterEnd',
        'verse_start': 'VerseStart',
        'verse_end': 'VerseEnd',
        'duration': 'Duration',
        'completed': 'Completed'
    }

    attribute_map = {
        'id': 'id',
        'bible_id': 'bible_id',
        'fileset_id': 'fileset_id',
        'book_id': 'book_id',
        'chapter_start': 'chapter_start',
        'chapter_end': 'chapter_end',
        'verse_start': 'verse_start',
        'verse_end': 'verse_end',
        'duration': 'duration',
        'completed': 'completed'
    }

    def __init__(self, id=None, bible_id=None, fileset_id=None, book_id=None, chapter_start=None, chapter_end=None, verse_start=None, verse_end=None, duration=None, completed=None, local_vars_configuration=None):  # noqa: E501
        """PlaylistItemDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._bible_id = None
        self._fileset_id = None
        self._book_id = None
        self._chapter_start = None
        self._chapter_end = None
        self._verse_start = None
        self._verse_end = None
        self._duration = None
        self._completed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if bible_id is not None:
            self.bible_id = bible_id
        if fileset_id is not None:
            self.fileset_id = fileset_id
        if book_id is not None:
            self.book_id = book_id
        if chapter_start is not None:
            self.chapter_start = chapter_start
        if chapter_end is not None:
            self.chapter_end = chapter_end
        if verse_start is not None:
            self.verse_start = verse_start
        if verse_end is not None:
            self.verse_end = verse_end
        if duration is not None:
            self.duration = duration
        if completed is not None:
            self.completed = completed

    @property
    def id(self):
        """Gets the id of this PlaylistItemDetail.  # noqa: E501


        :return: The id of this PlaylistItemDetail.  # noqa: E501
        :rtype: Id
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistItemDetail.


        :param id: The id of this PlaylistItemDetail.  # noqa: E501
        :type: Id
        """

        self._id = id

    @property
    def bible_id(self):
        """Gets the bible_id of this PlaylistItemDetail.  # noqa: E501


        :return: The bible_id of this PlaylistItemDetail.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this PlaylistItemDetail.


        :param bible_id: The bible_id of this PlaylistItemDetail.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def fileset_id(self):
        """Gets the fileset_id of this PlaylistItemDetail.  # noqa: E501


        :return: The fileset_id of this PlaylistItemDetail.  # noqa: E501
        :rtype: FilesetId
        """
        return self._fileset_id

    @fileset_id.setter
    def fileset_id(self, fileset_id):
        """Sets the fileset_id of this PlaylistItemDetail.


        :param fileset_id: The fileset_id of this PlaylistItemDetail.  # noqa: E501
        :type: FilesetId
        """

        self._fileset_id = fileset_id

    @property
    def book_id(self):
        """Gets the book_id of this PlaylistItemDetail.  # noqa: E501


        :return: The book_id of this PlaylistItemDetail.  # noqa: E501
        :rtype: BookId
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this PlaylistItemDetail.


        :param book_id: The book_id of this PlaylistItemDetail.  # noqa: E501
        :type: BookId
        """

        self._book_id = book_id

    @property
    def chapter_start(self):
        """Gets the chapter_start of this PlaylistItemDetail.  # noqa: E501


        :return: The chapter_start of this PlaylistItemDetail.  # noqa: E501
        :rtype: ChapterStart
        """
        return self._chapter_start

    @chapter_start.setter
    def chapter_start(self, chapter_start):
        """Sets the chapter_start of this PlaylistItemDetail.


        :param chapter_start: The chapter_start of this PlaylistItemDetail.  # noqa: E501
        :type: ChapterStart
        """

        self._chapter_start = chapter_start

    @property
    def chapter_end(self):
        """Gets the chapter_end of this PlaylistItemDetail.  # noqa: E501


        :return: The chapter_end of this PlaylistItemDetail.  # noqa: E501
        :rtype: ChapterEnd
        """
        return self._chapter_end

    @chapter_end.setter
    def chapter_end(self, chapter_end):
        """Sets the chapter_end of this PlaylistItemDetail.


        :param chapter_end: The chapter_end of this PlaylistItemDetail.  # noqa: E501
        :type: ChapterEnd
        """

        self._chapter_end = chapter_end

    @property
    def verse_start(self):
        """Gets the verse_start of this PlaylistItemDetail.  # noqa: E501


        :return: The verse_start of this PlaylistItemDetail.  # noqa: E501
        :rtype: VerseStart
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this PlaylistItemDetail.


        :param verse_start: The verse_start of this PlaylistItemDetail.  # noqa: E501
        :type: VerseStart
        """

        self._verse_start = verse_start

    @property
    def verse_end(self):
        """Gets the verse_end of this PlaylistItemDetail.  # noqa: E501


        :return: The verse_end of this PlaylistItemDetail.  # noqa: E501
        :rtype: VerseEnd
        """
        return self._verse_end

    @verse_end.setter
    def verse_end(self, verse_end):
        """Sets the verse_end of this PlaylistItemDetail.


        :param verse_end: The verse_end of this PlaylistItemDetail.  # noqa: E501
        :type: VerseEnd
        """

        self._verse_end = verse_end

    @property
    def duration(self):
        """Gets the duration of this PlaylistItemDetail.  # noqa: E501


        :return: The duration of this PlaylistItemDetail.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PlaylistItemDetail.


        :param duration: The duration of this PlaylistItemDetail.  # noqa: E501
        :type: Duration
        """

        self._duration = duration

    @property
    def completed(self):
        """Gets the completed of this PlaylistItemDetail.  # noqa: E501


        :return: The completed of this PlaylistItemDetail.  # noqa: E501
        :rtype: Completed
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this PlaylistItemDetail.


        :param completed: The completed of this PlaylistItemDetail.  # noqa: E501
        :type: Completed
        """

        self._completed = completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaylistItemDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlaylistItemDetail):
            return True

        return self.to_dict() != other.to_dict()
