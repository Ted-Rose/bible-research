# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'url_avatar': 'str',
        'url_avatar_icon': 'str',
        'url_site': 'str',
        'reset_path': 'str',
        'description': 'str',
        'deleted_at': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'url_avatar': 'url_avatar',
        'url_avatar_icon': 'url_avatar_icon',
        'url_site': 'url_site',
        'reset_path': 'reset_path',
        'description': 'description',
        'deleted_at': 'deleted_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, url_avatar=None, url_avatar_icon=None, url_site=None, reset_path=None, description=None, deleted_at=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._url_avatar = None
        self._url_avatar_icon = None
        self._url_site = None
        self._reset_path = None
        self._description = None
        self._deleted_at = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if url_avatar is not None:
            self.url_avatar = url_avatar
        if url_avatar_icon is not None:
            self.url_avatar_icon = url_avatar_icon
        if url_site is not None:
            self.url_site = url_site
        if reset_path is not None:
            self.reset_path = reset_path
        if description is not None:
            self.description = description
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501

        The unique id for the project  # noqa: E501

        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        The unique id for the project  # noqa: E501

        :param id: The id of this Project.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 24):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `24`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501

        The name of the project  # noqa: E501

        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        The name of the project  # noqa: E501

        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 191):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `191`")  # noqa: E501

        self._name = name

    @property
    def url_avatar(self):
        """Gets the url_avatar of this Project.  # noqa: E501

        The url to the logo / main identifying image for the project  # noqa: E501

        :return: The url_avatar of this Project.  # noqa: E501
        :rtype: str
        """
        return self._url_avatar

    @url_avatar.setter
    def url_avatar(self, url_avatar):
        """Sets the url_avatar of this Project.

        The url to the logo / main identifying image for the project  # noqa: E501

        :param url_avatar: The url_avatar of this Project.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_avatar is not None and len(url_avatar) > 191):
            raise ValueError("Invalid value for `url_avatar`, length must be less than or equal to `191`")  # noqa: E501

        self._url_avatar = url_avatar

    @property
    def url_avatar_icon(self):
        """Gets the url_avatar_icon of this Project.  # noqa: E501

        The url to the logo / main identifying image for the project in a form that is suitable for small images (less than 100 pixels)  # noqa: E501

        :return: The url_avatar_icon of this Project.  # noqa: E501
        :rtype: str
        """
        return self._url_avatar_icon

    @url_avatar_icon.setter
    def url_avatar_icon(self, url_avatar_icon):
        """Sets the url_avatar_icon of this Project.

        The url to the logo / main identifying image for the project in a form that is suitable for small images (less than 100 pixels)  # noqa: E501

        :param url_avatar_icon: The url_avatar_icon of this Project.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_avatar_icon is not None and len(url_avatar_icon) > 191):
            raise ValueError("Invalid value for `url_avatar_icon`, length must be less than or equal to `191`")  # noqa: E501

        self._url_avatar_icon = url_avatar_icon

    @property
    def url_site(self):
        """Gets the url_site of this Project.  # noqa: E501

        The url to the site that is currently making use of the API  # noqa: E501

        :return: The url_site of this Project.  # noqa: E501
        :rtype: str
        """
        return self._url_site

    @url_site.setter
    def url_site(self, url_site):
        """Sets the url_site of this Project.

        The url to the site that is currently making use of the API  # noqa: E501

        :param url_site: The url_site of this Project.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url_site is not None and len(url_site) > 191):
            raise ValueError("Invalid value for `url_site`, length must be less than or equal to `191`")  # noqa: E501

        self._url_site = url_site

    @property
    def reset_path(self):
        """Gets the reset_path of this Project.  # noqa: E501

        The url to the location that contains the password reset form. Note this should end with a / and expect the final url path item to be a token. Example: https://example.com/password/reset/ with the expectation of receiving https://example.com/password/reset/{TOKEN_ID}  # noqa: E501

        :return: The reset_path of this Project.  # noqa: E501
        :rtype: str
        """
        return self._reset_path

    @reset_path.setter
    def reset_path(self, reset_path):
        """Sets the reset_path of this Project.

        The url to the location that contains the password reset form. Note this should end with a / and expect the final url path item to be a token. Example: https://example.com/password/reset/ with the expectation of receiving https://example.com/password/reset/{TOKEN_ID}  # noqa: E501

        :param reset_path: The reset_path of this Project.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                reset_path is not None and len(reset_path) > 191):
            raise ValueError("Invalid value for `reset_path`, length must be less than or equal to `191`")  # noqa: E501

        self._reset_path = reset_path

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501

        The description of the project and it's goals  # noqa: E501

        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        The description of the project and it's goals  # noqa: E501

        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Project.  # noqa: E501

        The day the project was soft deleted  # noqa: E501

        :return: The deleted_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Project.

        The day the project was soft deleted  # noqa: E501

        :param deleted_at: The deleted_at of this Project.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def created_at(self):
        """Gets the created_at of this Project.  # noqa: E501

        The day the project was added to the api  # noqa: E501

        :return: The created_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.

        The day the project was added to the api  # noqa: E501

        :param created_at: The created_at of this Project.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Project.  # noqa: E501

        The day the project was last updated  # noqa: E501

        :return: The updated_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Project.

        The day the project was last updated  # noqa: E501

        :param updated_at: The updated_at of this Project.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
