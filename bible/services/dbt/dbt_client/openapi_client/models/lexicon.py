# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Lexicon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'base_word': 'str',
        'usage': 'str',
        'definition': 'str',
        'derived': 'str',
        'part_of_speech': 'str',
        'aramaic': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'id': 'id',
        'base_word': 'base_word',
        'usage': 'usage',
        'definition': 'definition',
        'derived': 'derived',
        'part_of_speech': 'part_of_speech',
        'aramaic': 'aramaic',
        'comment': 'comment'
    }

    def __init__(self, id=None, base_word=None, usage=None, definition=None, derived=None, part_of_speech=None, aramaic=None, comment=None, local_vars_configuration=None):  # noqa: E501
        """Lexicon - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._base_word = None
        self._usage = None
        self._definition = None
        self._derived = None
        self._part_of_speech = None
        self._aramaic = None
        self._comment = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if base_word is not None:
            self.base_word = base_word
        if usage is not None:
            self.usage = usage
        if definition is not None:
            self.definition = definition
        if derived is not None:
            self.derived = derived
        if part_of_speech is not None:
            self.part_of_speech = part_of_speech
        if aramaic is not None:
            self.aramaic = aramaic
        if comment is not None:
            self.comment = comment

    @property
    def id(self):
        """Gets the id of this Lexicon.  # noqa: E501

        Strongs id for the lexical entry  # noqa: E501

        :return: The id of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lexicon.

        Strongs id for the lexical entry  # noqa: E501

        :param id: The id of this Lexicon.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 5):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `5`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 2):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and not re.search(r'^[G||H]\d\d?\d?\d?$', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^[G||H]\d\d?\d?\d?$/`")  # noqa: E501

        self._id = id

    @property
    def base_word(self):
        """Gets the base_word of this Lexicon.  # noqa: E501

        The Greek or Hebrew word being defined  # noqa: E501

        :return: The base_word of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._base_word

    @base_word.setter
    def base_word(self, base_word):
        """Sets the base_word of this Lexicon.

        The Greek or Hebrew word being defined  # noqa: E501

        :param base_word: The base_word of this Lexicon.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                base_word is not None and len(base_word) > 64):
            raise ValueError("Invalid value for `base_word`, length must be less than or equal to `64`")  # noqa: E501

        self._base_word = base_word

    @property
    def usage(self):
        """Gets the usage of this Lexicon.  # noqa: E501


        :return: The usage of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Lexicon.


        :param usage: The usage of this Lexicon.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def definition(self):
        """Gets the definition of this Lexicon.  # noqa: E501


        :return: The definition of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this Lexicon.


        :param definition: The definition of this Lexicon.  # noqa: E501
        :type: str
        """

        self._definition = definition

    @property
    def derived(self):
        """Gets the derived of this Lexicon.  # noqa: E501


        :return: The derived of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._derived

    @derived.setter
    def derived(self, derived):
        """Sets the derived of this Lexicon.


        :param derived: The derived of this Lexicon.  # noqa: E501
        :type: str
        """

        self._derived = derived

    @property
    def part_of_speech(self):
        """Gets the part_of_speech of this Lexicon.  # noqa: E501


        :return: The part_of_speech of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._part_of_speech

    @part_of_speech.setter
    def part_of_speech(self, part_of_speech):
        """Sets the part_of_speech of this Lexicon.


        :param part_of_speech: The part_of_speech of this Lexicon.  # noqa: E501
        :type: str
        """

        self._part_of_speech = part_of_speech

    @property
    def aramaic(self):
        """Gets the aramaic of this Lexicon.  # noqa: E501


        :return: The aramaic of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._aramaic

    @aramaic.setter
    def aramaic(self, aramaic):
        """Sets the aramaic of this Lexicon.


        :param aramaic: The aramaic of this Lexicon.  # noqa: E501
        :type: str
        """

        self._aramaic = aramaic

    @property
    def comment(self):
        """Gets the comment of this Lexicon.  # noqa: E501


        :return: The comment of this Lexicon.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Lexicon.


        :param comment: The comment of this Lexicon.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lexicon):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Lexicon):
            return True

        return self.to_dict() != other.to_dict()
