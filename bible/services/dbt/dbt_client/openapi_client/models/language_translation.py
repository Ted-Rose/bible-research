# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LanguageTranslation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'language_source_id': 'int',
        'language_translation_id': 'int',
        'name': 'str',
        'priority': 'int',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'language_source_id': 'language_source_id',
        'language_translation_id': 'language_translation_id',
        'name': 'name',
        'priority': 'priority',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, language_source_id=None, language_translation_id=None, name=None, priority=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """LanguageTranslation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._language_source_id = None
        self._language_translation_id = None
        self._name = None
        self._priority = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if language_source_id is not None:
            self.language_source_id = language_source_id
        if language_translation_id is not None:
            self.language_translation_id = language_translation_id
        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this LanguageTranslation.  # noqa: E501

        The incrementing id of the language  # noqa: E501

        :return: The id of this LanguageTranslation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LanguageTranslation.

        The incrementing id of the language  # noqa: E501

        :param id: The id of this LanguageTranslation.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def language_source_id(self):
        """Gets the language_source_id of this LanguageTranslation.  # noqa: E501

        The incrementing id of the language_source  # noqa: E501

        :return: The language_source_id of this LanguageTranslation.  # noqa: E501
        :rtype: int
        """
        return self._language_source_id

    @language_source_id.setter
    def language_source_id(self, language_source_id):
        """Sets the language_source_id of this LanguageTranslation.

        The incrementing id of the language_source  # noqa: E501

        :param language_source_id: The language_source_id of this LanguageTranslation.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                language_source_id is not None and language_source_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `language_source_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._language_source_id = language_source_id

    @property
    def language_translation_id(self):
        """Gets the language_translation_id of this LanguageTranslation.  # noqa: E501

        The incrementing id of the language_translation  # noqa: E501

        :return: The language_translation_id of this LanguageTranslation.  # noqa: E501
        :rtype: int
        """
        return self._language_translation_id

    @language_translation_id.setter
    def language_translation_id(self, language_translation_id):
        """Sets the language_translation_id of this LanguageTranslation.

        The incrementing id of the language_translation  # noqa: E501

        :param language_translation_id: The language_translation_id of this LanguageTranslation.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                language_translation_id is not None and language_translation_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `language_translation_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._language_translation_id = language_translation_id

    @property
    def name(self):
        """Gets the name of this LanguageTranslation.  # noqa: E501

        The language translation name  # noqa: E501

        :return: The name of this LanguageTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LanguageTranslation.

        The language translation name  # noqa: E501

        :param name: The name of this LanguageTranslation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this LanguageTranslation.  # noqa: E501

        The priority of the language translation  # noqa: E501

        :return: The priority of this LanguageTranslation.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this LanguageTranslation.

        The priority of the language translation  # noqa: E501

        :param priority: The priority of this LanguageTranslation.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority > 255):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority < 0):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def created_at(self):
        """Gets the created_at of this LanguageTranslation.  # noqa: E501

        The timestamp at which the translation was created at  # noqa: E501

        :return: The created_at of this LanguageTranslation.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LanguageTranslation.

        The timestamp at which the translation was created at  # noqa: E501

        :param created_at: The created_at of this LanguageTranslation.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LanguageTranslation.  # noqa: E501

        The timestamp at which the translation was last updated at  # noqa: E501

        :return: The updated_at of this LanguageTranslation.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LanguageTranslation.

        The timestamp at which the translation was last updated at  # noqa: E501

        :param updated_at: The updated_at of this LanguageTranslation.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguageTranslation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LanguageTranslation):
            return True

        return self.to_dict() != other.to_dict()
