# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OrganizationTranslation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language_iso': 'str',
        'organization_id': 'int',
        'vernacular': 'bool',
        'alt': 'bool',
        'name': 'str',
        'description': 'str',
        'description_short': 'str'
    }

    attribute_map = {
        'language_iso': 'language_iso',
        'organization_id': 'organization_id',
        'vernacular': 'vernacular',
        'alt': 'alt',
        'name': 'name',
        'description': 'description',
        'description_short': 'description_short'
    }

    def __init__(self, language_iso=None, organization_id=None, vernacular=None, alt=None, name=None, description=None, description_short=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationTranslation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language_iso = None
        self._organization_id = None
        self._vernacular = None
        self._alt = None
        self._name = None
        self._description = None
        self._description_short = None
        self.discriminator = None

        if language_iso is not None:
            self.language_iso = language_iso
        if organization_id is not None:
            self.organization_id = organization_id
        if vernacular is not None:
            self.vernacular = vernacular
        if alt is not None:
            self.alt = alt
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if description_short is not None:
            self.description_short = description_short

    @property
    def language_iso(self):
        """Gets the language_iso of this OrganizationTranslation.  # noqa: E501

        The iso code for the translation language  # noqa: E501

        :return: The language_iso of this OrganizationTranslation.  # noqa: E501
        :rtype: str
        """
        return self._language_iso

    @language_iso.setter
    def language_iso(self, language_iso):
        """Sets the language_iso of this OrganizationTranslation.

        The iso code for the translation language  # noqa: E501

        :param language_iso: The language_iso of this OrganizationTranslation.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                language_iso is not None and len(language_iso) < 3):
            raise ValueError("Invalid value for `language_iso`, length must be greater than or equal to `3`")  # noqa: E501

        self._language_iso = language_iso

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationTranslation.  # noqa: E501

        The Organization's incrementing id  # noqa: E501

        :return: The organization_id of this OrganizationTranslation.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationTranslation.

        The Organization's incrementing id  # noqa: E501

        :param organization_id: The organization_id of this OrganizationTranslation.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                organization_id is not None and organization_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def vernacular(self):
        """Gets the vernacular of this OrganizationTranslation.  # noqa: E501

        If the current translation is the primary/vernacular translation  # noqa: E501

        :return: The vernacular of this OrganizationTranslation.  # noqa: E501
        :rtype: bool
        """
        return self._vernacular

    @vernacular.setter
    def vernacular(self, vernacular):
        """Sets the vernacular of this OrganizationTranslation.

        If the current translation is the primary/vernacular translation  # noqa: E501

        :param vernacular: The vernacular of this OrganizationTranslation.  # noqa: E501
        :type: bool
        """

        self._vernacular = vernacular

    @property
    def alt(self):
        """Gets the alt of this OrganizationTranslation.  # noqa: E501

        If the current name is a secondary title for the organization  # noqa: E501

        :return: The alt of this OrganizationTranslation.  # noqa: E501
        :rtype: bool
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this OrganizationTranslation.

        If the current name is a secondary title for the organization  # noqa: E501

        :param alt: The alt of this OrganizationTranslation.  # noqa: E501
        :type: bool
        """

        self._alt = alt

    @property
    def name(self):
        """Gets the name of this OrganizationTranslation.  # noqa: E501

        The current translated name for the organization  # noqa: E501

        :return: The name of this OrganizationTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationTranslation.

        The current translated name for the organization  # noqa: E501

        :param name: The name of this OrganizationTranslation.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 191):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `191`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this OrganizationTranslation.  # noqa: E501

        The current translated description for the organization  # noqa: E501

        :return: The description of this OrganizationTranslation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrganizationTranslation.

        The current translated description for the organization  # noqa: E501

        :param description: The description of this OrganizationTranslation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_short(self):
        """Gets the description_short of this OrganizationTranslation.  # noqa: E501

        The current translated shortened description for the organization  # noqa: E501

        :return: The description_short of this OrganizationTranslation.  # noqa: E501
        :rtype: str
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this OrganizationTranslation.

        The current translated shortened description for the organization  # noqa: E501

        :param description_short: The description_short of this OrganizationTranslation.  # noqa: E501
        :type: str
        """

        self._description_short = description_short

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationTranslation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationTranslation):
            return True

        return self.to_dict() != other.to_dict()
