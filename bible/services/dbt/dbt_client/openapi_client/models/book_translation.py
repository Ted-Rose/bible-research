# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BookTranslation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'iso': 'Iso',
        'book_id': 'Id',
        'name': 'str',
        'name_long': 'str',
        'name_short': 'str',
        'name_abbreviation': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'iso': 'iso',
        'book_id': 'book_id',
        'name': 'name',
        'name_long': 'name_long',
        'name_short': 'name_short',
        'name_abbreviation': 'name_abbreviation',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, iso=None, book_id=None, name=None, name_long=None, name_short=None, name_abbreviation=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """BookTranslation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._iso = None
        self._book_id = None
        self._name = None
        self._name_long = None
        self._name_short = None
        self._name_abbreviation = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if iso is not None:
            self.iso = iso
        if book_id is not None:
            self.book_id = book_id
        if name is not None:
            self.name = name
        if name_long is not None:
            self.name_long = name_long
        if name_short is not None:
            self.name_short = name_short
        if name_abbreviation is not None:
            self.name_abbreviation = name_abbreviation
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def iso(self):
        """Gets the iso of this BookTranslation.  # noqa: E501


        :return: The iso of this BookTranslation.  # noqa: E501
        :rtype: Iso
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this BookTranslation.


        :param iso: The iso of this BookTranslation.  # noqa: E501
        :type: Iso
        """

        self._iso = iso

    @property
    def book_id(self):
        """Gets the book_id of this BookTranslation.  # noqa: E501


        :return: The book_id of this BookTranslation.  # noqa: E501
        :rtype: Id
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this BookTranslation.


        :param book_id: The book_id of this BookTranslation.  # noqa: E501
        :type: Id
        """

        self._book_id = book_id

    @property
    def name(self):
        """Gets the name of this BookTranslation.  # noqa: E501

        The translated name of the biblical book  # noqa: E501

        :return: The name of this BookTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BookTranslation.

        The translated name of the biblical book  # noqa: E501

        :param name: The name of this BookTranslation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_long(self):
        """Gets the name_long of this BookTranslation.  # noqa: E501

        The long form of the translated name  # noqa: E501

        :return: The name_long of this BookTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name_long

    @name_long.setter
    def name_long(self, name_long):
        """Sets the name_long of this BookTranslation.

        The long form of the translated name  # noqa: E501

        :param name_long: The name_long of this BookTranslation.  # noqa: E501
        :type: str
        """

        self._name_long = name_long

    @property
    def name_short(self):
        """Gets the name_short of this BookTranslation.  # noqa: E501

        The short form of the translated name  # noqa: E501

        :return: The name_short of this BookTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name_short

    @name_short.setter
    def name_short(self, name_short):
        """Sets the name_short of this BookTranslation.

        The short form of the translated name  # noqa: E501

        :param name_short: The name_short of this BookTranslation.  # noqa: E501
        :type: str
        """

        self._name_short = name_short

    @property
    def name_abbreviation(self):
        """Gets the name_abbreviation of this BookTranslation.  # noqa: E501

        The abbreviated form of the translated name  # noqa: E501

        :return: The name_abbreviation of this BookTranslation.  # noqa: E501
        :rtype: str
        """
        return self._name_abbreviation

    @name_abbreviation.setter
    def name_abbreviation(self, name_abbreviation):
        """Sets the name_abbreviation of this BookTranslation.

        The abbreviated form of the translated name  # noqa: E501

        :param name_abbreviation: The name_abbreviation of this BookTranslation.  # noqa: E501
        :type: str
        """

        self._name_abbreviation = name_abbreviation

    @property
    def created_at(self):
        """Gets the created_at of this BookTranslation.  # noqa: E501

        The timestamp that the translated name was originally created  # noqa: E501

        :return: The created_at of this BookTranslation.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BookTranslation.

        The timestamp that the translated name was originally created  # noqa: E501

        :param created_at: The created_at of this BookTranslation.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BookTranslation.  # noqa: E501

        The timestamp that the translated name was last updated  # noqa: E501

        :return: The updated_at of this BookTranslation.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BookTranslation.

        The timestamp that the translated name was last updated  # noqa: E501

        :param updated_at: The updated_at of this BookTranslation.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookTranslation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BookTranslation):
            return True

        return self.to_dict() != other.to_dict()
