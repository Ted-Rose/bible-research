# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LanguageCode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'language_id': 'int',
        'source': 'str',
        'code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'language_id': 'language_id',
        'source': 'source',
        'code': 'code'
    }

    def __init__(self, id=None, language_id=None, source=None, code=None, local_vars_configuration=None):  # noqa: E501
        """LanguageCode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._language_id = None
        self._source = None
        self._code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if language_id is not None:
            self.language_id = language_id
        if source is not None:
            self.source = source
        if code is not None:
            self.code = code

    @property
    def id(self):
        """Gets the id of this LanguageCode.  # noqa: E501

        The incrementing id of the language Code  # noqa: E501

        :return: The id of this LanguageCode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LanguageCode.

        The incrementing id of the language Code  # noqa: E501

        :param id: The id of this LanguageCode.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def language_id(self):
        """Gets the language_id of this LanguageCode.  # noqa: E501

        The foreign key pointing to the incrementing id of the language  # noqa: E501

        :return: The language_id of this LanguageCode.  # noqa: E501
        :rtype: int
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this LanguageCode.

        The foreign key pointing to the incrementing id of the language  # noqa: E501

        :param language_id: The language_id of this LanguageCode.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                language_id is not None and language_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `language_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._language_id = language_id

    @property
    def source(self):
        """Gets the source of this LanguageCode.  # noqa: E501

        The source pointing to the incrementing id of the language  # noqa: E501

        :return: The source of this LanguageCode.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LanguageCode.

        The source pointing to the incrementing id of the language  # noqa: E501

        :param source: The source of this LanguageCode.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def code(self):
        """Gets the code of this LanguageCode.  # noqa: E501

        The foreign code for the language  # noqa: E501

        :return: The code of this LanguageCode.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LanguageCode.

        The foreign code for the language  # noqa: E501

        :param code: The code of this LanguageCode.  # noqa: E501
        :type: str
        """

        self._code = code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguageCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LanguageCode):
            return True

        return self.to_dict() != other.to_dict()
