# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PlanDay(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed': 'bool',
        'id': 'int',
        'playlist_id': 'Id'
    }

    attribute_map = {
        'completed': 'completed',
        'id': 'id',
        'playlist_id': 'playlist_id'
    }

    def __init__(self, completed=None, id=None, playlist_id=None, local_vars_configuration=None):  # noqa: E501
        """PlanDay - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completed = None
        self._id = None
        self._playlist_id = None
        self.discriminator = None

        if completed is not None:
            self.completed = completed
        if id is not None:
            self.id = id
        if playlist_id is not None:
            self.playlist_id = playlist_id

    @property
    def completed(self):
        """Gets the completed of this PlanDay.  # noqa: E501

        If the plan day is completed  # noqa: E501

        :return: The completed of this PlanDay.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this PlanDay.

        If the plan day is completed  # noqa: E501

        :param completed: The completed of this PlanDay.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def id(self):
        """Gets the id of this PlanDay.  # noqa: E501

        The plan day id  # noqa: E501

        :return: The id of this PlanDay.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanDay.

        The plan day id  # noqa: E501

        :param id: The id of this PlanDay.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def playlist_id(self):
        """Gets the playlist_id of this PlanDay.  # noqa: E501


        :return: The playlist_id of this PlanDay.  # noqa: E501
        :rtype: Id
        """
        return self._playlist_id

    @playlist_id.setter
    def playlist_id(self, playlist_id):
        """Sets the playlist_id of this PlanDay.


        :param playlist_id: The playlist_id of this PlanDay.  # noqa: E501
        :type: Id
        """

        self._playlist_id = playlist_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanDay):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlanDay):
            return True

        return self.to_dict() != other.to_dict()
