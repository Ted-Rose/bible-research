# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NumeralSystem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'value': 'int',
        'glyph': 'str',
        'numeral_written': 'str'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'glyph': 'glyph',
        'numeral_written': 'numeral_written'
    }

    def __init__(self, id=None, value=None, glyph=None, numeral_written=None, local_vars_configuration=None):  # noqa: E501
        """NumeralSystem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._value = None
        self._glyph = None
        self._numeral_written = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if glyph is not None:
            self.glyph = glyph
        if numeral_written is not None:
            self.numeral_written = numeral_written

    @property
    def id(self):
        """Gets the id of this NumeralSystem.  # noqa: E501

        The id of the numberal system  # noqa: E501

        :return: The id of this NumeralSystem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NumeralSystem.

        The id of the numberal system  # noqa: E501

        :param id: The id of this NumeralSystem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 20):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `20`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this NumeralSystem.  # noqa: E501

        The integer value of the glyph  # noqa: E501

        :return: The value of this NumeralSystem.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NumeralSystem.

        The integer value of the glyph  # noqa: E501

        :param value: The value of this NumeralSystem.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                value is not None and value > 200):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                value is not None and value < 0):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def glyph(self):
        """Gets the glyph of this NumeralSystem.  # noqa: E501

        The numeral in the vernacular of the writing system  # noqa: E501

        :return: The glyph of this NumeralSystem.  # noqa: E501
        :rtype: str
        """
        return self._glyph

    @glyph.setter
    def glyph(self, glyph):
        """Sets the glyph of this NumeralSystem.

        The numeral in the vernacular of the writing system  # noqa: E501

        :param glyph: The glyph of this NumeralSystem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                glyph is not None and len(glyph) > 8):
            raise ValueError("Invalid value for `glyph`, length must be less than or equal to `8`")  # noqa: E501

        self._glyph = glyph

    @property
    def numeral_written(self):
        """Gets the numeral_written of this NumeralSystem.  # noqa: E501

        The word for the numeral in the vernacular of the writing system  # noqa: E501

        :return: The numeral_written of this NumeralSystem.  # noqa: E501
        :rtype: str
        """
        return self._numeral_written

    @numeral_written.setter
    def numeral_written(self, numeral_written):
        """Sets the numeral_written of this NumeralSystem.

        The word for the numeral in the vernacular of the writing system  # noqa: E501

        :param numeral_written: The numeral_written of this NumeralSystem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                numeral_written is not None and len(numeral_written) > 8):
            raise ValueError("Invalid value for `numeral_written`, length must be less than or equal to `8`")  # noqa: E501

        self._numeral_written = numeral_written

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NumeralSystem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NumeralSystem):
            return True

        return self.to_dict() != other.to_dict()
