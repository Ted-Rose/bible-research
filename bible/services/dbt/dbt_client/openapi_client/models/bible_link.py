# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleLink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'bible_id': 'Id',
        'type': 'str',
        'url': 'str',
        'title': 'str',
        'organization_id': 'Id',
        'created_at': 'str',
        'updated_at': 'str',
        'provider': 'str'
    }

    attribute_map = {
        'id': 'id',
        'bible_id': 'bible_id',
        'type': 'type',
        'url': 'url',
        'title': 'title',
        'organization_id': 'organization_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'provider': 'provider'
    }

    def __init__(self, id=None, bible_id=None, type=None, url=None, title=None, organization_id=None, created_at=None, updated_at=None, provider=None, local_vars_configuration=None):  # noqa: E501
        """BibleLink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._bible_id = None
        self._type = None
        self._url = None
        self._title = None
        self._organization_id = None
        self._created_at = None
        self._updated_at = None
        self._provider = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if bible_id is not None:
            self.bible_id = bible_id
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if title is not None:
            self.title = title
        if organization_id is not None:
            self.organization_id = organization_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if provider is not None:
            self.provider = provider

    @property
    def id(self):
        """Gets the id of this BibleLink.  # noqa: E501


        :return: The id of this BibleLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BibleLink.


        :param id: The id of this BibleLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def bible_id(self):
        """Gets the bible_id of this BibleLink.  # noqa: E501


        :return: The bible_id of this BibleLink.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this BibleLink.


        :param bible_id: The bible_id of this BibleLink.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def type(self):
        """Gets the type of this BibleLink.  # noqa: E501

        The type of link, for example, web, pdf, print  # noqa: E501

        :return: The type of this BibleLink.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BibleLink.

        The type of link, for example, web, pdf, print  # noqa: E501

        :param type: The type of this BibleLink.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this BibleLink.  # noqa: E501

        URL of linked content  # noqa: E501

        :return: The url of this BibleLink.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BibleLink.

        URL of linked content  # noqa: E501

        :param url: The url of this BibleLink.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def title(self):
        """Gets the title of this BibleLink.  # noqa: E501


        :return: The title of this BibleLink.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BibleLink.


        :param title: The title of this BibleLink.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def organization_id(self):
        """Gets the organization_id of this BibleLink.  # noqa: E501


        :return: The organization_id of this BibleLink.  # noqa: E501
        :rtype: Id
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this BibleLink.


        :param organization_id: The organization_id of this BibleLink.  # noqa: E501
        :type: Id
        """

        self._organization_id = organization_id

    @property
    def created_at(self):
        """Gets the created_at of this BibleLink.  # noqa: E501


        :return: The created_at of this BibleLink.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BibleLink.


        :param created_at: The created_at of this BibleLink.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BibleLink.  # noqa: E501


        :return: The updated_at of this BibleLink.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BibleLink.


        :param updated_at: The updated_at of this BibleLink.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def provider(self):
        """Gets the provider of this BibleLink.  # noqa: E501

        Organization providing the content referenced in the link  # noqa: E501

        :return: The provider of this BibleLink.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this BibleLink.

        Organization providing the content referenced in the link  # noqa: E501

        :param provider: The provider of this BibleLink.  # noqa: E501
        :type: str
        """

        self._provider = provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleLink):
            return True

        return self.to_dict() != other.to_dict()
