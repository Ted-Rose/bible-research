# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BibleBook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bible_id': 'Id',
        'book_id': 'Id',
        'name': 'str',
        'name_short': 'str',
        'chapters': 'str',
        'book_seq': 'str'
    }

    attribute_map = {
        'bible_id': 'bible_id',
        'book_id': 'book_id',
        'name': 'name',
        'name_short': 'name_short',
        'chapters': 'chapters',
        'book_seq': 'book_seq'
    }

    def __init__(self, bible_id=None, book_id=None, name=None, name_short=None, chapters=None, book_seq=None, local_vars_configuration=None):  # noqa: E501
        """BibleBook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bible_id = None
        self._book_id = None
        self._name = None
        self._name_short = None
        self._chapters = None
        self._book_seq = None
        self.discriminator = None

        if bible_id is not None:
            self.bible_id = bible_id
        if book_id is not None:
            self.book_id = book_id
        if name is not None:
            self.name = name
        if name_short is not None:
            self.name_short = name_short
        if chapters is not None:
            self.chapters = chapters
        if book_seq is not None:
            self.book_seq = book_seq

    @property
    def bible_id(self):
        """Gets the bible_id of this BibleBook.  # noqa: E501


        :return: The bible_id of this BibleBook.  # noqa: E501
        :rtype: Id
        """
        return self._bible_id

    @bible_id.setter
    def bible_id(self, bible_id):
        """Sets the bible_id of this BibleBook.


        :param bible_id: The bible_id of this BibleBook.  # noqa: E501
        :type: Id
        """

        self._bible_id = bible_id

    @property
    def book_id(self):
        """Gets the book_id of this BibleBook.  # noqa: E501


        :return: The book_id of this BibleBook.  # noqa: E501
        :rtype: Id
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this BibleBook.


        :param book_id: The book_id of this BibleBook.  # noqa: E501
        :type: Id
        """

        self._book_id = book_id

    @property
    def name(self):
        """Gets the name of this BibleBook.  # noqa: E501

        The name of the book in the language of the bible  # noqa: E501

        :return: The name of this BibleBook.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BibleBook.

        The name of the book in the language of the bible  # noqa: E501

        :param name: The name of this BibleBook.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 191):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `191`")  # noqa: E501

        self._name = name

    @property
    def name_short(self):
        """Gets the name_short of this BibleBook.  # noqa: E501

        If the vernacular name has an abbreviated form, it will be stored hre  # noqa: E501

        :return: The name_short of this BibleBook.  # noqa: E501
        :rtype: str
        """
        return self._name_short

    @name_short.setter
    def name_short(self, name_short):
        """Sets the name_short of this BibleBook.

        If the vernacular name has an abbreviated form, it will be stored hre  # noqa: E501

        :param name_short: The name_short of this BibleBook.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name_short is not None and len(name_short) > 191):
            raise ValueError("Invalid value for `name_short`, length must be less than or equal to `191`")  # noqa: E501

        self._name_short = name_short

    @property
    def chapters(self):
        """Gets the chapters of this BibleBook.  # noqa: E501

        A string of the chapters in the book separated by a comma  # noqa: E501

        :return: The chapters of this BibleBook.  # noqa: E501
        :rtype: str
        """
        return self._chapters

    @chapters.setter
    def chapters(self, chapters):
        """Sets the chapters of this BibleBook.

        A string of the chapters in the book separated by a comma  # noqa: E501

        :param chapters: The chapters of this BibleBook.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                chapters is not None and len(chapters) > 491):
            raise ValueError("Invalid value for `chapters`, length must be less than or equal to `491`")  # noqa: E501

        self._chapters = chapters

    @property
    def book_seq(self):
        """Gets the book_seq of this BibleBook.  # noqa: E501

        The ordering provided by the licensor in the USX file, this column      *                  would likely populated for audio and video where there is no text  # noqa: E501

        :return: The book_seq of this BibleBook.  # noqa: E501
        :rtype: str
        """
        return self._book_seq

    @book_seq.setter
    def book_seq(self, book_seq):
        """Sets the book_seq of this BibleBook.

        The ordering provided by the licensor in the USX file, this column      *                  would likely populated for audio and video where there is no text  # noqa: E501

        :param book_seq: The book_seq of this BibleBook.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                book_seq is not None and len(book_seq) > 4):
            raise ValueError("Invalid value for `book_seq`, length must be less than or equal to `4`")  # noqa: E501

        self._book_seq = book_seq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BibleBook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BibleBook):
            return True

        return self.to_dict() != other.to_dict()
