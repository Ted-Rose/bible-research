# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V4BibleFilesetsChapterData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'book_id': 'Id',
        'book_name': 'Name',
        'book_name_alt': 'Name',
        'chapter': 'ChapterStart',
        'chapter_alt': 'ChapterStart',
        'verse_start': 'VerseSequence',
        'verse_start_alt': 'VerseStart',
        'verse_end': 'VerseEnd',
        'verse_end_alt': 'VerseEnd',
        'verse_text': 'str'
    }

    attribute_map = {
        'book_id': 'book_id',
        'book_name': 'book_name',
        'book_name_alt': 'book_name_alt',
        'chapter': 'chapter',
        'chapter_alt': 'chapter_alt',
        'verse_start': 'verse_start',
        'verse_start_alt': 'verse_start_alt',
        'verse_end': 'verse_end',
        'verse_end_alt': 'verse_end_alt',
        'verse_text': 'verse_text'
    }

    def __init__(self, book_id=None, book_name=None, book_name_alt=None, chapter=None, chapter_alt=None, verse_start=None, verse_start_alt=None, verse_end=None, verse_end_alt=None, verse_text=None, local_vars_configuration=None):  # noqa: E501
        """V4BibleFilesetsChapterData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._book_id = None
        self._book_name = None
        self._book_name_alt = None
        self._chapter = None
        self._chapter_alt = None
        self._verse_start = None
        self._verse_start_alt = None
        self._verse_end = None
        self._verse_end_alt = None
        self._verse_text = None
        self.discriminator = None

        if book_id is not None:
            self.book_id = book_id
        if book_name is not None:
            self.book_name = book_name
        if book_name_alt is not None:
            self.book_name_alt = book_name_alt
        if chapter is not None:
            self.chapter = chapter
        if chapter_alt is not None:
            self.chapter_alt = chapter_alt
        if verse_start is not None:
            self.verse_start = verse_start
        if verse_start_alt is not None:
            self.verse_start_alt = verse_start_alt
        if verse_end is not None:
            self.verse_end = verse_end
        if verse_end_alt is not None:
            self.verse_end_alt = verse_end_alt
        if verse_text is not None:
            self.verse_text = verse_text

    @property
    def book_id(self):
        """Gets the book_id of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The book_id of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: Id
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this V4BibleFilesetsChapterData.


        :param book_id: The book_id of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: Id
        """

        self._book_id = book_id

    @property
    def book_name(self):
        """Gets the book_name of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The book_name of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: Name
        """
        return self._book_name

    @book_name.setter
    def book_name(self, book_name):
        """Sets the book_name of this V4BibleFilesetsChapterData.


        :param book_name: The book_name of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: Name
        """

        self._book_name = book_name

    @property
    def book_name_alt(self):
        """Gets the book_name_alt of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The book_name_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: Name
        """
        return self._book_name_alt

    @book_name_alt.setter
    def book_name_alt(self, book_name_alt):
        """Sets the book_name_alt of this V4BibleFilesetsChapterData.


        :param book_name_alt: The book_name_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: Name
        """

        self._book_name_alt = book_name_alt

    @property
    def chapter(self):
        """Gets the chapter of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The chapter of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: ChapterStart
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter):
        """Sets the chapter of this V4BibleFilesetsChapterData.


        :param chapter: The chapter of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: ChapterStart
        """

        self._chapter = chapter

    @property
    def chapter_alt(self):
        """Gets the chapter_alt of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The chapter_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: ChapterStart
        """
        return self._chapter_alt

    @chapter_alt.setter
    def chapter_alt(self, chapter_alt):
        """Sets the chapter_alt of this V4BibleFilesetsChapterData.


        :param chapter_alt: The chapter_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: ChapterStart
        """

        self._chapter_alt = chapter_alt

    @property
    def verse_start(self):
        """Gets the verse_start of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The verse_start of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: VerseSequence
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this V4BibleFilesetsChapterData.


        :param verse_start: The verse_start of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: VerseSequence
        """

        self._verse_start = verse_start

    @property
    def verse_start_alt(self):
        """Gets the verse_start_alt of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The verse_start_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: VerseStart
        """
        return self._verse_start_alt

    @verse_start_alt.setter
    def verse_start_alt(self, verse_start_alt):
        """Sets the verse_start_alt of this V4BibleFilesetsChapterData.


        :param verse_start_alt: The verse_start_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: VerseStart
        """

        self._verse_start_alt = verse_start_alt

    @property
    def verse_end(self):
        """Gets the verse_end of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The verse_end of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: VerseEnd
        """
        return self._verse_end

    @verse_end.setter
    def verse_end(self, verse_end):
        """Sets the verse_end of this V4BibleFilesetsChapterData.


        :param verse_end: The verse_end of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: VerseEnd
        """

        self._verse_end = verse_end

    @property
    def verse_end_alt(self):
        """Gets the verse_end_alt of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The verse_end_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: VerseEnd
        """
        return self._verse_end_alt

    @verse_end_alt.setter
    def verse_end_alt(self, verse_end_alt):
        """Sets the verse_end_alt of this V4BibleFilesetsChapterData.


        :param verse_end_alt: The verse_end_alt of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: VerseEnd
        """

        self._verse_end_alt = verse_end_alt

    @property
    def verse_text(self):
        """Gets the verse_text of this V4BibleFilesetsChapterData.  # noqa: E501


        :return: The verse_text of this V4BibleFilesetsChapterData.  # noqa: E501
        :rtype: str
        """
        return self._verse_text

    @verse_text.setter
    def verse_text(self, verse_text):
        """Sets the verse_text of this V4BibleFilesetsChapterData.


        :param verse_text: The verse_text of this V4BibleFilesetsChapterData.  # noqa: E501
        :type: str
        """

        self._verse_text = verse_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4BibleFilesetsChapterData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4BibleFilesetsChapterData):
            return True

        return self.to_dict() != other.to_dict()
