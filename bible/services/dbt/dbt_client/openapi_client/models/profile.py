# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'thoroughfare': 'str',
        'premise': 'str',
        'sub_premise': 'str',
        'sex': 'int',
        'sub_administrative_area': 'str',
        'administrative_area': 'str',
        'zip': 'str',
        'country_id': 'Id'
    }

    attribute_map = {
        'thoroughfare': 'thoroughfare',
        'premise': 'premise',
        'sub_premise': 'sub_premise',
        'sex': 'sex',
        'sub_administrative_area': 'sub_administrative_area',
        'administrative_area': 'administrative_area',
        'zip': 'zip',
        'country_id': 'country_id'
    }

    def __init__(self, thoroughfare=None, premise=None, sub_premise=None, sex=None, sub_administrative_area=None, administrative_area=None, zip=None, country_id=None, local_vars_configuration=None):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._thoroughfare = None
        self._premise = None
        self._sub_premise = None
        self._sex = None
        self._sub_administrative_area = None
        self._administrative_area = None
        self._zip = None
        self._country_id = None
        self.discriminator = None

        if thoroughfare is not None:
            self.thoroughfare = thoroughfare
        if premise is not None:
            self.premise = premise
        if sub_premise is not None:
            self.sub_premise = sub_premise
        if sex is not None:
            self.sex = sex
        if sub_administrative_area is not None:
            self.sub_administrative_area = sub_administrative_area
        if administrative_area is not None:
            self.administrative_area = administrative_area
        if zip is not None:
            self.zip = zip
        if country_id is not None:
            self.country_id = country_id

    @property
    def thoroughfare(self):
        """Gets the thoroughfare of this Profile.  # noqa: E501


        :return: The thoroughfare of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._thoroughfare

    @thoroughfare.setter
    def thoroughfare(self, thoroughfare):
        """Sets the thoroughfare of this Profile.


        :param thoroughfare: The thoroughfare of this Profile.  # noqa: E501
        :type: str
        """

        self._thoroughfare = thoroughfare

    @property
    def premise(self):
        """Gets the premise of this Profile.  # noqa: E501


        :return: The premise of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._premise

    @premise.setter
    def premise(self, premise):
        """Sets the premise of this Profile.


        :param premise: The premise of this Profile.  # noqa: E501
        :type: str
        """

        self._premise = premise

    @property
    def sub_premise(self):
        """Gets the sub_premise of this Profile.  # noqa: E501


        :return: The sub_premise of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._sub_premise

    @sub_premise.setter
    def sub_premise(self, sub_premise):
        """Sets the sub_premise of this Profile.


        :param sub_premise: The sub_premise of this Profile.  # noqa: E501
        :type: str
        """

        self._sub_premise = sub_premise

    @property
    def sex(self):
        """Gets the sex of this Profile.  # noqa: E501

        This field aligns with the ISO/IEC 5218 Standard. Codes for the representation of human sexes is an international standard that defines a representation of human sexes through a language-neutral single-digit code.  # noqa: E501

        :return: The sex of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this Profile.

        This field aligns with the ISO/IEC 5218 Standard. Codes for the representation of human sexes is an international standard that defines a representation of human sexes through a language-neutral single-digit code.  # noqa: E501

        :param sex: The sex of this Profile.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 9]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sex not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sex` ({0}), must be one of {1}"  # noqa: E501
                .format(sex, allowed_values)
            )

        self._sex = sex

    @property
    def sub_administrative_area(self):
        """Gets the sub_administrative_area of this Profile.  # noqa: E501

        County or District  # noqa: E501

        :return: The sub_administrative_area of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._sub_administrative_area

    @sub_administrative_area.setter
    def sub_administrative_area(self, sub_administrative_area):
        """Sets the sub_administrative_area of this Profile.

        County or District  # noqa: E501

        :param sub_administrative_area: The sub_administrative_area of this Profile.  # noqa: E501
        :type: str
        """

        self._sub_administrative_area = sub_administrative_area

    @property
    def administrative_area(self):
        """Gets the administrative_area of this Profile.  # noqa: E501

        State / Province / Region (ISO code when available)  # noqa: E501

        :return: The administrative_area of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._administrative_area

    @administrative_area.setter
    def administrative_area(self, administrative_area):
        """Sets the administrative_area of this Profile.

        State / Province / Region (ISO code when available)  # noqa: E501

        :param administrative_area: The administrative_area of this Profile.  # noqa: E501
        :type: str
        """

        self._administrative_area = administrative_area

    @property
    def zip(self):
        """Gets the zip of this Profile.  # noqa: E501

        Postal code / ZIP Code  # noqa: E501

        :return: The zip of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Profile.

        Postal code / ZIP Code  # noqa: E501

        :param zip: The zip of this Profile.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def country_id(self):
        """Gets the country_id of this Profile.  # noqa: E501


        :return: The country_id of this Profile.  # noqa: E501
        :rtype: Id
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this Profile.


        :param country_id: The country_id of this Profile.  # noqa: E501
        :type: Id
        """

        self._country_id = country_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Profile):
            return True

        return self.to_dict() != other.to_dict()
