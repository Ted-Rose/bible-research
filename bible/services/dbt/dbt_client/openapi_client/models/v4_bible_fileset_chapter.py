# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V4BibleFilesetChapter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'book_id': 'BookId',
        'book_name': 'Name',
        'chapter_start': 'ChapterStart',
        'chapter_end': 'ChapterEnd',
        'verse_start': 'VerseStart',
        'verse_end': 'VerseEnd',
        'thumbnail': 'str',
        'timestamp': 'Timestamp',
        'path': 'FileName',
        'duration': 'Duration',
        'fileset': 'V4BibleFilesetChapterFileset'
    }

    attribute_map = {
        'book_id': 'book_id',
        'book_name': 'book_name',
        'chapter_start': 'chapter_start',
        'chapter_end': 'chapter_end',
        'verse_start': 'verse_start',
        'verse_end': 'verse_end',
        'thumbnail': 'thumbnail',
        'timestamp': 'timestamp',
        'path': 'path',
        'duration': 'duration',
        'fileset': 'fileset'
    }

    def __init__(self, book_id=None, book_name=None, chapter_start=None, chapter_end=None, verse_start=None, verse_end=None, thumbnail=None, timestamp=None, path=None, duration=None, fileset=None, local_vars_configuration=None):  # noqa: E501
        """V4BibleFilesetChapter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._book_id = None
        self._book_name = None
        self._chapter_start = None
        self._chapter_end = None
        self._verse_start = None
        self._verse_end = None
        self._thumbnail = None
        self._timestamp = None
        self._path = None
        self._duration = None
        self._fileset = None
        self.discriminator = None

        if book_id is not None:
            self.book_id = book_id
        if book_name is not None:
            self.book_name = book_name
        if chapter_start is not None:
            self.chapter_start = chapter_start
        if chapter_end is not None:
            self.chapter_end = chapter_end
        if verse_start is not None:
            self.verse_start = verse_start
        if verse_end is not None:
            self.verse_end = verse_end
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if timestamp is not None:
            self.timestamp = timestamp
        if path is not None:
            self.path = path
        if duration is not None:
            self.duration = duration
        if fileset is not None:
            self.fileset = fileset

    @property
    def book_id(self):
        """Gets the book_id of this V4BibleFilesetChapter.  # noqa: E501


        :return: The book_id of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: BookId
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this V4BibleFilesetChapter.


        :param book_id: The book_id of this V4BibleFilesetChapter.  # noqa: E501
        :type: BookId
        """

        self._book_id = book_id

    @property
    def book_name(self):
        """Gets the book_name of this V4BibleFilesetChapter.  # noqa: E501


        :return: The book_name of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: Name
        """
        return self._book_name

    @book_name.setter
    def book_name(self, book_name):
        """Sets the book_name of this V4BibleFilesetChapter.


        :param book_name: The book_name of this V4BibleFilesetChapter.  # noqa: E501
        :type: Name
        """

        self._book_name = book_name

    @property
    def chapter_start(self):
        """Gets the chapter_start of this V4BibleFilesetChapter.  # noqa: E501


        :return: The chapter_start of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: ChapterStart
        """
        return self._chapter_start

    @chapter_start.setter
    def chapter_start(self, chapter_start):
        """Sets the chapter_start of this V4BibleFilesetChapter.


        :param chapter_start: The chapter_start of this V4BibleFilesetChapter.  # noqa: E501
        :type: ChapterStart
        """

        self._chapter_start = chapter_start

    @property
    def chapter_end(self):
        """Gets the chapter_end of this V4BibleFilesetChapter.  # noqa: E501


        :return: The chapter_end of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: ChapterEnd
        """
        return self._chapter_end

    @chapter_end.setter
    def chapter_end(self, chapter_end):
        """Sets the chapter_end of this V4BibleFilesetChapter.


        :param chapter_end: The chapter_end of this V4BibleFilesetChapter.  # noqa: E501
        :type: ChapterEnd
        """

        self._chapter_end = chapter_end

    @property
    def verse_start(self):
        """Gets the verse_start of this V4BibleFilesetChapter.  # noqa: E501


        :return: The verse_start of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: VerseStart
        """
        return self._verse_start

    @verse_start.setter
    def verse_start(self, verse_start):
        """Sets the verse_start of this V4BibleFilesetChapter.


        :param verse_start: The verse_start of this V4BibleFilesetChapter.  # noqa: E501
        :type: VerseStart
        """

        self._verse_start = verse_start

    @property
    def verse_end(self):
        """Gets the verse_end of this V4BibleFilesetChapter.  # noqa: E501


        :return: The verse_end of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: VerseEnd
        """
        return self._verse_end

    @verse_end.setter
    def verse_end(self, verse_end):
        """Sets the verse_end of this V4BibleFilesetChapter.


        :param verse_end: The verse_end of this V4BibleFilesetChapter.  # noqa: E501
        :type: VerseEnd
        """

        self._verse_end = verse_end

    @property
    def thumbnail(self):
        """Gets the thumbnail of this V4BibleFilesetChapter.  # noqa: E501

        The image url  # noqa: E501

        :return: The thumbnail of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this V4BibleFilesetChapter.

        The image url  # noqa: E501

        :param thumbnail: The thumbnail of this V4BibleFilesetChapter.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                thumbnail is not None and len(thumbnail) > 191):
            raise ValueError("Invalid value for `thumbnail`, length must be less than or equal to `191`")  # noqa: E501

        self._thumbnail = thumbnail

    @property
    def timestamp(self):
        """Gets the timestamp of this V4BibleFilesetChapter.  # noqa: E501


        :return: The timestamp of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: Timestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this V4BibleFilesetChapter.


        :param timestamp: The timestamp of this V4BibleFilesetChapter.  # noqa: E501
        :type: Timestamp
        """

        self._timestamp = timestamp

    @property
    def path(self):
        """Gets the path of this V4BibleFilesetChapter.  # noqa: E501


        :return: The path of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: FileName
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this V4BibleFilesetChapter.


        :param path: The path of this V4BibleFilesetChapter.  # noqa: E501
        :type: FileName
        """

        self._path = path

    @property
    def duration(self):
        """Gets the duration of this V4BibleFilesetChapter.  # noqa: E501


        :return: The duration of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this V4BibleFilesetChapter.


        :param duration: The duration of this V4BibleFilesetChapter.  # noqa: E501
        :type: Duration
        """

        self._duration = duration

    @property
    def fileset(self):
        """Gets the fileset of this V4BibleFilesetChapter.  # noqa: E501


        :return: The fileset of this V4BibleFilesetChapter.  # noqa: E501
        :rtype: V4BibleFilesetChapterFileset
        """
        return self._fileset

    @fileset.setter
    def fileset(self, fileset):
        """Sets the fileset of this V4BibleFilesetChapter.


        :param fileset: The fileset of this V4BibleFilesetChapter.  # noqa: E501
        :type: V4BibleFilesetChapterFileset
        """

        self._fileset = fileset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4BibleFilesetChapter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4BibleFilesetChapter):
            return True

        return self.to_dict() != other.to_dict()
