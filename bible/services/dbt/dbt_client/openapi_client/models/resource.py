# coding: utf-8

"""
    Digital Bible Platform

    Fast, easy, and free API access to video, audio, and text Bibles.  # noqa: E501

    The version of the OpenAPI document: 4.0.0-beta
    Contact: support@digitalbibleplatform.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Resource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'iso': 'str',
        'organization_id': 'Id',
        'source_id': 'str',
        'cover': 'str',
        'cover_thumbnail': 'str',
        'date': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'iso': 'iso',
        'organization_id': 'organization_id',
        'source_id': 'source_id',
        'cover': 'cover',
        'cover_thumbnail': 'cover_thumbnail',
        'date': 'date',
        'type': 'type'
    }

    def __init__(self, id=None, iso=None, organization_id=None, source_id=None, cover=None, cover_thumbnail=None, date=None, type=None, local_vars_configuration=None):  # noqa: E501
        """Resource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._iso = None
        self._organization_id = None
        self._source_id = None
        self._cover = None
        self._cover_thumbnail = None
        self._date = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if iso is not None:
            self.iso = iso
        if organization_id is not None:
            self.organization_id = organization_id
        self.source_id = source_id
        self.cover = cover
        self.cover_thumbnail = cover_thumbnail
        self.date = date
        self.type = type

    @property
    def id(self):
        """Gets the id of this Resource.  # noqa: E501

        The Resource's incrementing id  # noqa: E501

        :return: The id of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Resource.

        The Resource's incrementing id  # noqa: E501

        :param id: The id of this Resource.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def iso(self):
        """Gets the iso of this Resource.  # noqa: E501

        The Resource's iso  # noqa: E501

        :return: The iso of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this Resource.

        The Resource's iso  # noqa: E501

        :param iso: The iso of this Resource.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                iso is not None and len(iso) < 3):
            raise ValueError("Invalid value for `iso`, length must be greater than or equal to `3`")  # noqa: E501

        self._iso = iso

    @property
    def organization_id(self):
        """Gets the organization_id of this Resource.  # noqa: E501


        :return: The organization_id of this Resource.  # noqa: E501
        :rtype: Id
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Resource.


        :param organization_id: The organization_id of this Resource.  # noqa: E501
        :type: Id
        """

        self._organization_id = organization_id

    @property
    def source_id(self):
        """Gets the source_id of this Resource.  # noqa: E501

        The owning organization's tracking id for the resource  # noqa: E501

        :return: The source_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Resource.

        The owning organization's tracking id for the resource  # noqa: E501

        :param source_id: The source_id of this Resource.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def cover(self):
        """Gets the cover of this Resource.  # noqa: E501

        The url to the main cover art for the resource  # noqa: E501

        :return: The cover of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Resource.

        The url to the main cover art for the resource  # noqa: E501

        :param cover: The cover of this Resource.  # noqa: E501
        :type: str
        """

        self._cover = cover

    @property
    def cover_thumbnail(self):
        """Gets the cover_thumbnail of this Resource.  # noqa: E501

        The url to the thumbnail cover art for the resource  # noqa: E501

        :return: The cover_thumbnail of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._cover_thumbnail

    @cover_thumbnail.setter
    def cover_thumbnail(self, cover_thumbnail):
        """Sets the cover_thumbnail of this Resource.

        The url to the thumbnail cover art for the resource  # noqa: E501

        :param cover_thumbnail: The cover_thumbnail of this Resource.  # noqa: E501
        :type: str
        """

        self._cover_thumbnail = cover_thumbnail

    @property
    def date(self):
        """Gets the date of this Resource.  # noqa: E501

        The date the resource was originally published  # noqa: E501

        :return: The date of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Resource.

        The date the resource was originally published  # noqa: E501

        :param date: The date of this Resource.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def type(self):
        """Gets the type of this Resource.  # noqa: E501

        The type of media the resource can be categorized as  # noqa: E501

        :return: The type of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Resource.

        The type of media the resource can be categorized as  # noqa: E501

        :param type: The type of this Resource.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Resource):
            return True

        return self.to_dict() != other.to_dict()
